# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spoonacular.api_client import ApiClient
from spoonacular.exceptions import (
    ApiTypeError,
    ApiValueError
)


class ProductsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def autocomplete_product_search(self, query, **kwargs):  # noqa: E501
        """Autocomplete Product Search  # noqa: E501

        Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_product_search(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (partial) search query. (required)
        :param int number: The number of results to return (between 1 and 25).
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.autocomplete_product_search_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.autocomplete_product_search_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def autocomplete_product_search_with_http_info(self, query, **kwargs):  # noqa: E501
        """Autocomplete Product Search  # noqa: E501

        Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_product_search_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (partial) search query. (required)
        :param int number: The number of results to return (between 1 and 25).
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method autocomplete_product_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ApiValueError("Missing the required parameter `query` when calling `autocomplete_product_search`")  # noqa: E501

        if 'number' in local_var_params and local_var_params['number'] > 25:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `autocomplete_product_search`, must be a value less than or equal to `25`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `autocomplete_product_search`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classify_grocery_product(self, inline_object1, **kwargs):  # noqa: E501
        """Classify Grocery Product  # noqa: E501

        This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classify_grocery_product(inline_object1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineObject1 inline_object1: (required)
        :param str locale: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classify_grocery_product_with_http_info(inline_object1, **kwargs)  # noqa: E501
        else:
            (data) = self.classify_grocery_product_with_http_info(inline_object1, **kwargs)  # noqa: E501
            return data

    def classify_grocery_product_with_http_info(self, inline_object1, **kwargs):  # noqa: E501
        """Classify Grocery Product  # noqa: E501

        This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classify_grocery_product_with_http_info(inline_object1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineObject1 inline_object1: (required)
        :param str locale: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object1', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classify_grocery_product" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inline_object1' is set
        if ('inline_object1' not in local_var_params or
                local_var_params['inline_object1'] is None):
            raise ApiValueError("Missing the required parameter `inline_object1` when calling `classify_grocery_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in local_var_params:
            query_params.append(('locale', local_var_params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object1' in local_var_params:
            body_params = local_var_params['inline_object1']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/classify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classify_grocery_product_bulk(self, inline_object, **kwargs):  # noqa: E501
        """Classify Grocery Product Bulk  # noqa: E501

        Provide a set of product jsons, get back classified products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classify_grocery_product_bulk(inline_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[InlineObject] inline_object: (required)
        :param str locale: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
        :return: list[InlineResponse20033]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classify_grocery_product_bulk_with_http_info(inline_object, **kwargs)  # noqa: E501
        else:
            (data) = self.classify_grocery_product_bulk_with_http_info(inline_object, **kwargs)  # noqa: E501
            return data

    def classify_grocery_product_bulk_with_http_info(self, inline_object, **kwargs):  # noqa: E501
        """Classify Grocery Product Bulk  # noqa: E501

        Provide a set of product jsons, get back classified products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classify_grocery_product_bulk_with_http_info(inline_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[InlineObject] inline_object: (required)
        :param str locale: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
        :return: list[InlineResponse20033]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classify_grocery_product_bulk" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inline_object' is set
        if ('inline_object' not in local_var_params or
                local_var_params['inline_object'] is None):
            raise ApiValueError("Missing the required parameter `inline_object` when calling `classify_grocery_product_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in local_var_params:
            query_params.append(('locale', local_var_params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object' in local_var_params:
            body_params = local_var_params['inline_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/classifyBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20033]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comparable_products(self, upc, **kwargs):  # noqa: E501
        """Get Comparable Products  # noqa: E501

        Find comparable products to the given one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comparable_products(upc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float upc: The UPC of the product for which you want to find comparable products. (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_comparable_products_with_http_info(upc, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comparable_products_with_http_info(upc, **kwargs)  # noqa: E501
            return data

    def get_comparable_products_with_http_info(self, upc, **kwargs):  # noqa: E501
        """Get Comparable Products  # noqa: E501

        Find comparable products to the given one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_comparable_products_with_http_info(upc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float upc: The UPC of the product for which you want to find comparable products. (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['upc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comparable_products" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upc' is set
        if ('upc' not in local_var_params or
                local_var_params['upc'] is None):
            raise ApiValueError("Missing the required parameter `upc` when calling `get_comparable_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upc' in local_var_params:
            path_params['upc'] = local_var_params['upc']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/upc/{upc}/comparable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_information(self, id, **kwargs):  # noqa: E501
        """Get Product Information  # noqa: E501

        Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_information(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_information_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_information_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_product_information_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Product Information  # noqa: E501

        Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_information_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_information" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_product_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_nutrition_by_id_image(self, id, **kwargs):  # noqa: E501
        """Product Nutrition by ID Image  # noqa: E501

        Visualize a product's nutritional information as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_nutrition_by_id_image(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The id of the product. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_nutrition_by_id_image_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_nutrition_by_id_image_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_nutrition_by_id_image_with_http_info(self, id, **kwargs):  # noqa: E501
        """Product Nutrition by ID Image  # noqa: E501

        Visualize a product's nutritional information as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_nutrition_by_id_image_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The id of the product. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_nutrition_by_id_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `product_nutrition_by_id_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/{id}/nutritionWidget.png', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_nutrition_label_image(self, id, **kwargs):  # noqa: E501
        """Product Nutrition Label Image  # noqa: E501

        Get a product's nutrition label as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_nutrition_label_image(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The product id. (required)
        :param bool show_optional_nutrients: Whether to show optional nutrients.
        :param bool show_zero_values: Whether to show zero values.
        :param bool show_ingredients: Whether to show a list of ingredients.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_nutrition_label_image_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_nutrition_label_image_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_nutrition_label_image_with_http_info(self, id, **kwargs):  # noqa: E501
        """Product Nutrition Label Image  # noqa: E501

        Get a product's nutrition label as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_nutrition_label_image_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The product id. (required)
        :param bool show_optional_nutrients: Whether to show optional nutrients.
        :param bool show_zero_values: Whether to show zero values.
        :param bool show_ingredients: Whether to show a list of ingredients.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'show_optional_nutrients', 'show_zero_values', 'show_ingredients']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_nutrition_label_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `product_nutrition_label_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'show_optional_nutrients' in local_var_params:
            query_params.append(('showOptionalNutrients', local_var_params['show_optional_nutrients']))  # noqa: E501
        if 'show_zero_values' in local_var_params:
            query_params.append(('showZeroValues', local_var_params['show_zero_values']))  # noqa: E501
        if 'show_ingredients' in local_var_params:
            query_params.append(('showIngredients', local_var_params['show_ingredients']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/{id}/nutritionLabel.png', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_nutrition_label_widget(self, id, **kwargs):  # noqa: E501
        """Product Nutrition Label Widget  # noqa: E501

        Get a product's nutrition label as an HTML widget.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_nutrition_label_widget(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The product id. (required)
        :param bool default_css: Whether the default CSS should be added to the response.
        :param bool show_optional_nutrients: Whether to show optional nutrients.
        :param bool show_zero_values: Whether to show zero values.
        :param bool show_ingredients: Whether to show a list of ingredients.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_nutrition_label_widget_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_nutrition_label_widget_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_nutrition_label_widget_with_http_info(self, id, **kwargs):  # noqa: E501
        """Product Nutrition Label Widget  # noqa: E501

        Get a product's nutrition label as an HTML widget.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_nutrition_label_widget_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The product id. (required)
        :param bool default_css: Whether the default CSS should be added to the response.
        :param bool show_optional_nutrients: Whether to show optional nutrients.
        :param bool show_zero_values: Whether to show zero values.
        :param bool show_ingredients: Whether to show a list of ingredients.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'default_css', 'show_optional_nutrients', 'show_zero_values', 'show_ingredients']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_nutrition_label_widget" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `product_nutrition_label_widget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'default_css' in local_var_params:
            query_params.append(('defaultCss', local_var_params['default_css']))  # noqa: E501
        if 'show_optional_nutrients' in local_var_params:
            query_params.append(('showOptionalNutrients', local_var_params['show_optional_nutrients']))  # noqa: E501
        if 'show_zero_values' in local_var_params:
            query_params.append(('showZeroValues', local_var_params['show_zero_values']))  # noqa: E501
        if 'show_ingredients' in local_var_params:
            query_params.append(('showIngredients', local_var_params['show_ingredients']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/{id}/nutritionLabel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_grocery_products(self, **kwargs):  # noqa: E501
        """Search Grocery Products  # noqa: E501

        Search packaged food products, such as frozen pizza or Greek yogurt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_grocery_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param float min_calories: The minimum amount of calories the product must have.
        :param float max_calories: The maximum amount of calories the product can have.
        :param float min_carbs: The minimum amount of carbohydrates in grams the product must have.
        :param float max_carbs: The maximum amount of carbohydrates in grams the product can have.
        :param float min_protein: The minimum amount of protein in grams the product must have.
        :param float max_protein: The maximum amount of protein in grams the product can have.
        :param float min_fat: The minimum amount of fat in grams the product must have.
        :param float max_fat: The maximum amount of fat in grams the product can have.
        :param bool add_product_information: If set to true, you get more information about the products returned.
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_grocery_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_grocery_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_grocery_products_with_http_info(self, **kwargs):  # noqa: E501
        """Search Grocery Products  # noqa: E501

        Search packaged food products, such as frozen pizza or Greek yogurt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_grocery_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param float min_calories: The minimum amount of calories the product must have.
        :param float max_calories: The maximum amount of calories the product can have.
        :param float min_carbs: The minimum amount of carbohydrates in grams the product must have.
        :param float max_carbs: The maximum amount of carbohydrates in grams the product can have.
        :param float min_protein: The minimum amount of protein in grams the product must have.
        :param float max_protein: The maximum amount of protein in grams the product can have.
        :param float min_fat: The minimum amount of fat in grams the product must have.
        :param float max_fat: The maximum amount of fat in grams the product can have.
        :param bool add_product_information: If set to true, you get more information about the products returned.
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'min_calories', 'max_calories', 'min_carbs', 'max_carbs', 'min_protein', 'max_protein', 'min_fat', 'max_fat', 'add_product_information', 'offset', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_grocery_products" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'offset' in local_var_params and local_var_params['offset'] > 900:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_grocery_products`, must be a value less than or equal to `900`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_grocery_products`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_grocery_products`, must be a value less than or equal to `100`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_grocery_products`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'min_calories' in local_var_params:
            query_params.append(('minCalories', local_var_params['min_calories']))  # noqa: E501
        if 'max_calories' in local_var_params:
            query_params.append(('maxCalories', local_var_params['max_calories']))  # noqa: E501
        if 'min_carbs' in local_var_params:
            query_params.append(('minCarbs', local_var_params['min_carbs']))  # noqa: E501
        if 'max_carbs' in local_var_params:
            query_params.append(('maxCarbs', local_var_params['max_carbs']))  # noqa: E501
        if 'min_protein' in local_var_params:
            query_params.append(('minProtein', local_var_params['min_protein']))  # noqa: E501
        if 'max_protein' in local_var_params:
            query_params.append(('maxProtein', local_var_params['max_protein']))  # noqa: E501
        if 'min_fat' in local_var_params:
            query_params.append(('minFat', local_var_params['min_fat']))  # noqa: E501
        if 'max_fat' in local_var_params:
            query_params.append(('maxFat', local_var_params['max_fat']))  # noqa: E501
        if 'add_product_information' in local_var_params:
            query_params.append(('addProductInformation', local_var_params['add_product_information']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_grocery_products_by_upc(self, upc, **kwargs):  # noqa: E501
        """Search Grocery Products by UPC  # noqa: E501

        Get information about a packaged food using its UPC.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_grocery_products_by_upc(upc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float upc: The product's UPC. (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_grocery_products_by_upc_with_http_info(upc, **kwargs)  # noqa: E501
        else:
            (data) = self.search_grocery_products_by_upc_with_http_info(upc, **kwargs)  # noqa: E501
            return data

    def search_grocery_products_by_upc_with_http_info(self, upc, **kwargs):  # noqa: E501
        """Search Grocery Products by UPC  # noqa: E501

        Get information about a packaged food using its UPC.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_grocery_products_by_upc_with_http_info(upc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float upc: The product's UPC. (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['upc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_grocery_products_by_upc" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upc' is set
        if ('upc' not in local_var_params or
                local_var_params['upc'] is None):
            raise ApiValueError("Missing the required parameter `upc` when calling `search_grocery_products_by_upc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upc' in local_var_params:
            path_params['upc'] = local_var_params['upc']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/upc/{upc}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def visualize_product_nutrition_by_id(self, id, **kwargs):  # noqa: E501
        """Product Nutrition by ID Widget  # noqa: E501

        Visualize a product's nutritional information as HTML including CSS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.visualize_product_nutrition_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :param bool default_css: Whether the default CSS should be added to the response.
        :param str accept: Accept header.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.visualize_product_nutrition_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.visualize_product_nutrition_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def visualize_product_nutrition_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Product Nutrition by ID Widget  # noqa: E501

        Visualize a product's nutritional information as HTML including CSS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.visualize_product_nutrition_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :param bool default_css: Whether the default CSS should be added to the response.
        :param str accept: Accept header.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'default_css', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method visualize_product_nutrition_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `visualize_product_nutrition_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'default_css' in local_var_params:
            query_params.append(('defaultCss', local_var_params['default_css']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/products/{id}/nutritionWidget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
