# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spoonacular.api_client import ApiClient
from spoonacular.exceptions import (
    ApiTypeError,
    ApiValueError
)


class WineApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_dish_pairing_for_wine(self, wine, **kwargs):  # noqa: E501
        """Dish Pairing for Wine  # noqa: E501

        Find a dish that goes well with a given wine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dish_pairing_for_wine(wine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wine: The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\". (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dish_pairing_for_wine_with_http_info(wine, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dish_pairing_for_wine_with_http_info(wine, **kwargs)  # noqa: E501
            return data

    def get_dish_pairing_for_wine_with_http_info(self, wine, **kwargs):  # noqa: E501
        """Dish Pairing for Wine  # noqa: E501

        Find a dish that goes well with a given wine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dish_pairing_for_wine_with_http_info(wine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wine: The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\". (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wine']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dish_pairing_for_wine" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wine' is set
        if ('wine' not in local_var_params or
                local_var_params['wine'] is None):
            raise ApiValueError("Missing the required parameter `wine` when calling `get_dish_pairing_for_wine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'wine' in local_var_params:
            query_params.append(('wine', local_var_params['wine']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/wine/dishes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wine_description(self, wine, **kwargs):  # noqa: E501
        """Wine Description  # noqa: E501

        Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wine_description(wine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wine: The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\". (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wine_description_with_http_info(wine, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wine_description_with_http_info(wine, **kwargs)  # noqa: E501
            return data

    def get_wine_description_with_http_info(self, wine, **kwargs):  # noqa: E501
        """Wine Description  # noqa: E501

        Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wine_description_with_http_info(wine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wine: The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\". (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wine']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wine_description" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wine' is set
        if ('wine' not in local_var_params or
                local_var_params['wine'] is None):
            raise ApiValueError("Missing the required parameter `wine` when calling `get_wine_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'wine' in local_var_params:
            query_params.append(('wine', local_var_params['wine']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/wine/description', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wine_pairing(self, food, **kwargs):  # noqa: E501
        """Wine Pairing  # noqa: E501

        Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wine_pairing(food, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str food: The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\"). (required)
        :param float max_price: The maximum price for the specific wine recommendation in USD.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wine_pairing_with_http_info(food, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wine_pairing_with_http_info(food, **kwargs)  # noqa: E501
            return data

    def get_wine_pairing_with_http_info(self, food, **kwargs):  # noqa: E501
        """Wine Pairing  # noqa: E501

        Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wine_pairing_with_http_info(food, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str food: The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\"). (required)
        :param float max_price: The maximum price for the specific wine recommendation in USD.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['food', 'max_price']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wine_pairing" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'food' is set
        if ('food' not in local_var_params or
                local_var_params['food'] is None):
            raise ApiValueError("Missing the required parameter `food` when calling `get_wine_pairing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'food' in local_var_params:
            query_params.append(('food', local_var_params['food']))  # noqa: E501
        if 'max_price' in local_var_params:
            query_params.append(('maxPrice', local_var_params['max_price']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/wine/pairing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wine_recommendation(self, wine, **kwargs):  # noqa: E501
        """Wine Recommendation  # noqa: E501

        Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wine_recommendation(wine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wine: The type of wine to get a specific product recommendation for. (required)
        :param float max_price: The maximum price for the specific wine recommendation in USD.
        :param float min_rating: The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
        :param float number: The number of wine recommendations expected (between 1 and 100).
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wine_recommendation_with_http_info(wine, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wine_recommendation_with_http_info(wine, **kwargs)  # noqa: E501
            return data

    def get_wine_recommendation_with_http_info(self, wine, **kwargs):  # noqa: E501
        """Wine Recommendation  # noqa: E501

        Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wine_recommendation_with_http_info(wine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wine: The type of wine to get a specific product recommendation for. (required)
        :param float max_price: The maximum price for the specific wine recommendation in USD.
        :param float min_rating: The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
        :param float number: The number of wine recommendations expected (between 1 and 100).
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wine', 'max_price', 'min_rating', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wine_recommendation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wine' is set
        if ('wine' not in local_var_params or
                local_var_params['wine'] is None):
            raise ApiValueError("Missing the required parameter `wine` when calling `get_wine_recommendation`")  # noqa: E501

        if 'number' in local_var_params and local_var_params['number'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `get_wine_recommendation`, must be a value less than or equal to `100`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `get_wine_recommendation`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'wine' in local_var_params:
            query_params.append(('wine', local_var_params['wine']))  # noqa: E501
        if 'max_price' in local_var_params:
            query_params.append(('maxPrice', local_var_params['max_price']))  # noqa: E501
        if 'min_rating' in local_var_params:
            query_params.append(('minRating', local_var_params['min_rating']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/wine/recommendation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
