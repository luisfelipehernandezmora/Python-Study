# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20035(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'menu_items': 'list[InlineResponse20035MenuItems]',
        'total_menu_items': 'int',
        'type': 'str',
        'offset': 'int',
        'number': 'int'
    }

    attribute_map = {
        'menu_items': 'menuItems',
        'total_menu_items': 'totalMenuItems',
        'type': 'type',
        'offset': 'offset',
        'number': 'number'
    }

    def __init__(self, menu_items=None, total_menu_items=None, type=None, offset=None, number=None):  # noqa: E501
        """InlineResponse20035 - a model defined in OpenAPI"""  # noqa: E501

        self._menu_items = None
        self._total_menu_items = None
        self._type = None
        self._offset = None
        self._number = None
        self.discriminator = None

        self.menu_items = menu_items
        self.total_menu_items = total_menu_items
        self.type = type
        self.offset = offset
        self.number = number

    @property
    def menu_items(self):
        """Gets the menu_items of this InlineResponse20035.  # noqa: E501


        :return: The menu_items of this InlineResponse20035.  # noqa: E501
        :rtype: list[InlineResponse20035MenuItems]
        """
        return self._menu_items

    @menu_items.setter
    def menu_items(self, menu_items):
        """Sets the menu_items of this InlineResponse20035.


        :param menu_items: The menu_items of this InlineResponse20035.  # noqa: E501
        :type: list[InlineResponse20035MenuItems]
        """
        if menu_items is None:
            raise ValueError("Invalid value for `menu_items`, must not be `None`")  # noqa: E501

        self._menu_items = menu_items

    @property
    def total_menu_items(self):
        """Gets the total_menu_items of this InlineResponse20035.  # noqa: E501


        :return: The total_menu_items of this InlineResponse20035.  # noqa: E501
        :rtype: int
        """
        return self._total_menu_items

    @total_menu_items.setter
    def total_menu_items(self, total_menu_items):
        """Sets the total_menu_items of this InlineResponse20035.


        :param total_menu_items: The total_menu_items of this InlineResponse20035.  # noqa: E501
        :type: int
        """
        if total_menu_items is None:
            raise ValueError("Invalid value for `total_menu_items`, must not be `None`")  # noqa: E501

        self._total_menu_items = total_menu_items

    @property
    def type(self):
        """Gets the type of this InlineResponse20035.  # noqa: E501


        :return: The type of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20035.


        :param type: The type of this InlineResponse20035.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def offset(self):
        """Gets the offset of this InlineResponse20035.  # noqa: E501


        :return: The offset of this InlineResponse20035.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this InlineResponse20035.


        :param offset: The offset of this InlineResponse20035.  # noqa: E501
        :type: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def number(self):
        """Gets the number of this InlineResponse20035.  # noqa: E501


        :return: The number of this InlineResponse20035.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InlineResponse20035.


        :param number: The number of this InlineResponse20035.  # noqa: E501
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20035):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
