# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2003ExtendedIngredients(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aisle': 'str',
        'amount': 'float',
        'consitency': 'str',
        'id': 'int',
        'image': 'str',
        'measures': 'InlineResponse2003Measures',
        'meta': 'list[str]',
        'name': 'str',
        'original': 'str',
        'original_name': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'aisle': 'aisle',
        'amount': 'amount',
        'consitency': 'consitency',
        'id': 'id',
        'image': 'image',
        'measures': 'measures',
        'meta': 'meta',
        'name': 'name',
        'original': 'original',
        'original_name': 'originalName',
        'unit': 'unit'
    }

    def __init__(self, aisle=None, amount=None, consitency=None, id=None, image=None, measures=None, meta=None, name=None, original=None, original_name=None, unit=None):  # noqa: E501
        """InlineResponse2003ExtendedIngredients - a model defined in OpenAPI"""  # noqa: E501

        self._aisle = None
        self._amount = None
        self._consitency = None
        self._id = None
        self._image = None
        self._measures = None
        self._meta = None
        self._name = None
        self._original = None
        self._original_name = None
        self._unit = None
        self.discriminator = None

        self.aisle = aisle
        self.amount = amount
        self.consitency = consitency
        self.id = id
        self.image = image
        if measures is not None:
            self.measures = measures
        if meta is not None:
            self.meta = meta
        self.name = name
        self.original = original
        self.original_name = original_name
        self.unit = unit

    @property
    def aisle(self):
        """Gets the aisle of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The aisle of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this InlineResponse2003ExtendedIngredients.


        :param aisle: The aisle of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")  # noqa: E501
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")  # noqa: E501

        self._aisle = aisle

    @property
    def amount(self):
        """Gets the amount of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The amount of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse2003ExtendedIngredients.


        :param amount: The amount of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def consitency(self):
        """Gets the consitency of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The consitency of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: str
        """
        return self._consitency

    @consitency.setter
    def consitency(self, consitency):
        """Sets the consitency of this InlineResponse2003ExtendedIngredients.


        :param consitency: The consitency of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: str
        """
        if consitency is None:
            raise ValueError("Invalid value for `consitency`, must not be `None`")  # noqa: E501
        if consitency is not None and len(consitency) < 1:
            raise ValueError("Invalid value for `consitency`, length must be greater than or equal to `1`")  # noqa: E501

        self._consitency = consitency

    @property
    def id(self):
        """Gets the id of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The id of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2003ExtendedIngredients.


        :param id: The id of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image(self):
        """Gets the image of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The image of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this InlineResponse2003ExtendedIngredients.


        :param image: The image of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")  # noqa: E501

        self._image = image

    @property
    def measures(self):
        """Gets the measures of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The measures of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: InlineResponse2003Measures
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this InlineResponse2003ExtendedIngredients.


        :param measures: The measures of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: InlineResponse2003Measures
        """

        self._measures = measures

    @property
    def meta(self):
        """Gets the meta of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The meta of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: list[str]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this InlineResponse2003ExtendedIngredients.


        :param meta: The meta of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: list[str]
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The name of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2003ExtendedIngredients.


        :param name: The name of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def original(self):
        """Gets the original of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The original of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this InlineResponse2003ExtendedIngredients.


        :param original: The original of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: str
        """
        if original is None:
            raise ValueError("Invalid value for `original`, must not be `None`")  # noqa: E501
        if original is not None and len(original) < 1:
            raise ValueError("Invalid value for `original`, length must be greater than or equal to `1`")  # noqa: E501

        self._original = original

    @property
    def original_name(self):
        """Gets the original_name of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The original_name of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this InlineResponse2003ExtendedIngredients.


        :param original_name: The original_name of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: str
        """
        if original_name is None:
            raise ValueError("Invalid value for `original_name`, must not be `None`")  # noqa: E501
        if original_name is not None and len(original_name) < 1:
            raise ValueError("Invalid value for `original_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._original_name = original_name

    @property
    def unit(self):
        """Gets the unit of this InlineResponse2003ExtendedIngredients.  # noqa: E501


        :return: The unit of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InlineResponse2003ExtendedIngredients.


        :param unit: The unit of this InlineResponse2003ExtendedIngredients.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501
        if unit is not None and len(unit) < 0:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `0`")  # noqa: E501

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003ExtendedIngredients):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
