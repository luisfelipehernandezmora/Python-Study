# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2003WinePairingProductMatches(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'title': 'str',
        'description': 'str',
        'price': 'str',
        'image_url': 'str',
        'average_rating': 'float',
        'rating_count': 'int',
        'score': 'float',
        'link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'price': 'price',
        'image_url': 'imageUrl',
        'average_rating': 'averageRating',
        'rating_count': 'ratingCount',
        'score': 'score',
        'link': 'link'
    }

    def __init__(self, id=None, title=None, description=None, price=None, image_url=None, average_rating=None, rating_count=None, score=None, link=None):  # noqa: E501
        """InlineResponse2003WinePairingProductMatches - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._title = None
        self._description = None
        self._price = None
        self._image_url = None
        self._average_rating = None
        self._rating_count = None
        self._score = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.title = title
        self.description = description
        self.price = price
        self.image_url = image_url
        self.average_rating = average_rating
        self.rating_count = rating_count
        self.score = score
        self.link = link

    @property
    def id(self):
        """Gets the id of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The id of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2003WinePairingProductMatches.


        :param id: The id of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The title of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse2003WinePairingProductMatches.


        :param title: The title of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The description of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2003WinePairingProductMatches.


        :param description: The description of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def price(self):
        """Gets the price of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The price of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InlineResponse2003WinePairingProductMatches.


        :param price: The price of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501
        if price is not None and len(price) < 1:
            raise ValueError("Invalid value for `price`, length must be greater than or equal to `1`")  # noqa: E501

        self._price = price

    @property
    def image_url(self):
        """Gets the image_url of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The image_url of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this InlineResponse2003WinePairingProductMatches.


        :param image_url: The image_url of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501
        if image_url is not None and len(image_url) < 1:
            raise ValueError("Invalid value for `image_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._image_url = image_url

    @property
    def average_rating(self):
        """Gets the average_rating of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The average_rating of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: float
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """Sets the average_rating of this InlineResponse2003WinePairingProductMatches.


        :param average_rating: The average_rating of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: float
        """
        if average_rating is None:
            raise ValueError("Invalid value for `average_rating`, must not be `None`")  # noqa: E501

        self._average_rating = average_rating

    @property
    def rating_count(self):
        """Gets the rating_count of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The rating_count of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: int
        """
        return self._rating_count

    @rating_count.setter
    def rating_count(self, rating_count):
        """Sets the rating_count of this InlineResponse2003WinePairingProductMatches.


        :param rating_count: The rating_count of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: int
        """
        if rating_count is None:
            raise ValueError("Invalid value for `rating_count`, must not be `None`")  # noqa: E501

        self._rating_count = rating_count

    @property
    def score(self):
        """Gets the score of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The score of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this InlineResponse2003WinePairingProductMatches.


        :param score: The score of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def link(self):
        """Gets the link of this InlineResponse2003WinePairingProductMatches.  # noqa: E501


        :return: The link of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this InlineResponse2003WinePairingProductMatches.


        :param link: The link of this InlineResponse2003WinePairingProductMatches.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501
        if link is not None and len(link) < 1:
            raise ValueError("Invalid value for `link`, length must be greater than or equal to `1`")  # noqa: E501

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003WinePairingProductMatches):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
