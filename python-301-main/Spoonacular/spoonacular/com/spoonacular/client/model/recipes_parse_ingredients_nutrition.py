# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RecipesParseIngredientsNutrition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nutrients': 'list[RecipesParseIngredientsNutritionNutrients]',
        'properties': 'list[RecipesParseIngredientsNutritionProperties]',
        'flavonoids': 'list[RecipesParseIngredientsNutritionProperties]',
        'caloric_breakdown': 'RecipesParseIngredientsNutritionCaloricBreakdown',
        'weight_per_serving': 'RecipesParseIngredientsNutritionWeightPerServing'
    }

    attribute_map = {
        'nutrients': 'nutrients',
        'properties': 'properties',
        'flavonoids': 'flavonoids',
        'caloric_breakdown': 'caloricBreakdown',
        'weight_per_serving': 'weightPerServing'
    }

    def __init__(self, nutrients=None, properties=None, flavonoids=None, caloric_breakdown=None, weight_per_serving=None):  # noqa: E501
        """RecipesParseIngredientsNutrition - a model defined in OpenAPI"""  # noqa: E501

        self._nutrients = None
        self._properties = None
        self._flavonoids = None
        self._caloric_breakdown = None
        self._weight_per_serving = None
        self.discriminator = None

        self.nutrients = nutrients
        self.properties = properties
        self.flavonoids = flavonoids
        self.caloric_breakdown = caloric_breakdown
        self.weight_per_serving = weight_per_serving

    @property
    def nutrients(self):
        """Gets the nutrients of this RecipesParseIngredientsNutrition.  # noqa: E501


        :return: The nutrients of this RecipesParseIngredientsNutrition.  # noqa: E501
        :rtype: list[RecipesParseIngredientsNutritionNutrients]
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """Sets the nutrients of this RecipesParseIngredientsNutrition.


        :param nutrients: The nutrients of this RecipesParseIngredientsNutrition.  # noqa: E501
        :type: list[RecipesParseIngredientsNutritionNutrients]
        """
        if nutrients is None:
            raise ValueError("Invalid value for `nutrients`, must not be `None`")  # noqa: E501

        self._nutrients = nutrients

    @property
    def properties(self):
        """Gets the properties of this RecipesParseIngredientsNutrition.  # noqa: E501


        :return: The properties of this RecipesParseIngredientsNutrition.  # noqa: E501
        :rtype: list[RecipesParseIngredientsNutritionProperties]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this RecipesParseIngredientsNutrition.


        :param properties: The properties of this RecipesParseIngredientsNutrition.  # noqa: E501
        :type: list[RecipesParseIngredientsNutritionProperties]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def flavonoids(self):
        """Gets the flavonoids of this RecipesParseIngredientsNutrition.  # noqa: E501


        :return: The flavonoids of this RecipesParseIngredientsNutrition.  # noqa: E501
        :rtype: list[RecipesParseIngredientsNutritionProperties]
        """
        return self._flavonoids

    @flavonoids.setter
    def flavonoids(self, flavonoids):
        """Sets the flavonoids of this RecipesParseIngredientsNutrition.


        :param flavonoids: The flavonoids of this RecipesParseIngredientsNutrition.  # noqa: E501
        :type: list[RecipesParseIngredientsNutritionProperties]
        """
        if flavonoids is None:
            raise ValueError("Invalid value for `flavonoids`, must not be `None`")  # noqa: E501

        self._flavonoids = flavonoids

    @property
    def caloric_breakdown(self):
        """Gets the caloric_breakdown of this RecipesParseIngredientsNutrition.  # noqa: E501


        :return: The caloric_breakdown of this RecipesParseIngredientsNutrition.  # noqa: E501
        :rtype: RecipesParseIngredientsNutritionCaloricBreakdown
        """
        return self._caloric_breakdown

    @caloric_breakdown.setter
    def caloric_breakdown(self, caloric_breakdown):
        """Sets the caloric_breakdown of this RecipesParseIngredientsNutrition.


        :param caloric_breakdown: The caloric_breakdown of this RecipesParseIngredientsNutrition.  # noqa: E501
        :type: RecipesParseIngredientsNutritionCaloricBreakdown
        """
        if caloric_breakdown is None:
            raise ValueError("Invalid value for `caloric_breakdown`, must not be `None`")  # noqa: E501

        self._caloric_breakdown = caloric_breakdown

    @property
    def weight_per_serving(self):
        """Gets the weight_per_serving of this RecipesParseIngredientsNutrition.  # noqa: E501


        :return: The weight_per_serving of this RecipesParseIngredientsNutrition.  # noqa: E501
        :rtype: RecipesParseIngredientsNutritionWeightPerServing
        """
        return self._weight_per_serving

    @weight_per_serving.setter
    def weight_per_serving(self, weight_per_serving):
        """Sets the weight_per_serving of this RecipesParseIngredientsNutrition.


        :param weight_per_serving: The weight_per_serving of this RecipesParseIngredientsNutrition.  # noqa: E501
        :type: RecipesParseIngredientsNutritionWeightPerServing
        """
        if weight_per_serving is None:
            raise ValueError("Invalid value for `weight_per_serving`, must not be `None`")  # noqa: E501

        self._weight_per_serving = weight_per_serving

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipesParseIngredientsNutrition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
