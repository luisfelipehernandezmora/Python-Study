# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20019(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_amount': 'float',
        'source_unit': 'str',
        'target_amount': 'float',
        'target_unit': 'str',
        'answer': 'str'
    }

    attribute_map = {
        'source_amount': 'sourceAmount',
        'source_unit': 'sourceUnit',
        'target_amount': 'targetAmount',
        'target_unit': 'targetUnit',
        'answer': 'answer'
    }

    def __init__(self, source_amount=None, source_unit=None, target_amount=None, target_unit=None, answer=None):  # noqa: E501
        """InlineResponse20019 - a model defined in OpenAPI"""  # noqa: E501

        self._source_amount = None
        self._source_unit = None
        self._target_amount = None
        self._target_unit = None
        self._answer = None
        self.discriminator = None

        self.source_amount = source_amount
        self.source_unit = source_unit
        self.target_amount = target_amount
        self.target_unit = target_unit
        self.answer = answer

    @property
    def source_amount(self):
        """Gets the source_amount of this InlineResponse20019.  # noqa: E501


        :return: The source_amount of this InlineResponse20019.  # noqa: E501
        :rtype: float
        """
        return self._source_amount

    @source_amount.setter
    def source_amount(self, source_amount):
        """Sets the source_amount of this InlineResponse20019.


        :param source_amount: The source_amount of this InlineResponse20019.  # noqa: E501
        :type: float
        """
        if source_amount is None:
            raise ValueError("Invalid value for `source_amount`, must not be `None`")  # noqa: E501

        self._source_amount = source_amount

    @property
    def source_unit(self):
        """Gets the source_unit of this InlineResponse20019.  # noqa: E501


        :return: The source_unit of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._source_unit

    @source_unit.setter
    def source_unit(self, source_unit):
        """Sets the source_unit of this InlineResponse20019.


        :param source_unit: The source_unit of this InlineResponse20019.  # noqa: E501
        :type: str
        """
        if source_unit is None:
            raise ValueError("Invalid value for `source_unit`, must not be `None`")  # noqa: E501
        if source_unit is not None and len(source_unit) < 1:
            raise ValueError("Invalid value for `source_unit`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_unit = source_unit

    @property
    def target_amount(self):
        """Gets the target_amount of this InlineResponse20019.  # noqa: E501


        :return: The target_amount of this InlineResponse20019.  # noqa: E501
        :rtype: float
        """
        return self._target_amount

    @target_amount.setter
    def target_amount(self, target_amount):
        """Sets the target_amount of this InlineResponse20019.


        :param target_amount: The target_amount of this InlineResponse20019.  # noqa: E501
        :type: float
        """
        if target_amount is None:
            raise ValueError("Invalid value for `target_amount`, must not be `None`")  # noqa: E501

        self._target_amount = target_amount

    @property
    def target_unit(self):
        """Gets the target_unit of this InlineResponse20019.  # noqa: E501


        :return: The target_unit of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._target_unit

    @target_unit.setter
    def target_unit(self, target_unit):
        """Sets the target_unit of this InlineResponse20019.


        :param target_unit: The target_unit of this InlineResponse20019.  # noqa: E501
        :type: str
        """
        if target_unit is None:
            raise ValueError("Invalid value for `target_unit`, must not be `None`")  # noqa: E501
        if target_unit is not None and len(target_unit) < 1:
            raise ValueError("Invalid value for `target_unit`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_unit = target_unit

    @property
    def answer(self):
        """Gets the answer of this InlineResponse20019.  # noqa: E501


        :return: The answer of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this InlineResponse20019.


        :param answer: The answer of this InlineResponse20019.  # noqa: E501
        :type: str
        """
        if answer is None:
            raise ValueError("Invalid value for `answer`, must not be `None`")  # noqa: E501
        if answer is not None and len(answer) < 1:
            raise ValueError("Invalid value for `answer`, length must be greater than or equal to `1`")  # noqa: E501

        self._answer = answer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
