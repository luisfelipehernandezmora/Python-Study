# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2008(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sweetness': 'float',
        'saltiness': 'float',
        'sourness': 'float',
        'bitterness': 'float',
        'savoriness': 'float',
        'fattiness': 'float',
        'spiciness': 'float'
    }

    attribute_map = {
        'sweetness': 'sweetness',
        'saltiness': 'saltiness',
        'sourness': 'sourness',
        'bitterness': 'bitterness',
        'savoriness': 'savoriness',
        'fattiness': 'fattiness',
        'spiciness': 'spiciness'
    }

    def __init__(self, sweetness=None, saltiness=None, sourness=None, bitterness=None, savoriness=None, fattiness=None, spiciness=None):  # noqa: E501
        """InlineResponse2008 - a model defined in OpenAPI"""  # noqa: E501

        self._sweetness = None
        self._saltiness = None
        self._sourness = None
        self._bitterness = None
        self._savoriness = None
        self._fattiness = None
        self._spiciness = None
        self.discriminator = None

        self.sweetness = sweetness
        self.saltiness = saltiness
        self.sourness = sourness
        self.bitterness = bitterness
        self.savoriness = savoriness
        self.fattiness = fattiness
        self.spiciness = spiciness

    @property
    def sweetness(self):
        """Gets the sweetness of this InlineResponse2008.  # noqa: E501


        :return: The sweetness of this InlineResponse2008.  # noqa: E501
        :rtype: float
        """
        return self._sweetness

    @sweetness.setter
    def sweetness(self, sweetness):
        """Sets the sweetness of this InlineResponse2008.


        :param sweetness: The sweetness of this InlineResponse2008.  # noqa: E501
        :type: float
        """
        if sweetness is None:
            raise ValueError("Invalid value for `sweetness`, must not be `None`")  # noqa: E501

        self._sweetness = sweetness

    @property
    def saltiness(self):
        """Gets the saltiness of this InlineResponse2008.  # noqa: E501


        :return: The saltiness of this InlineResponse2008.  # noqa: E501
        :rtype: float
        """
        return self._saltiness

    @saltiness.setter
    def saltiness(self, saltiness):
        """Sets the saltiness of this InlineResponse2008.


        :param saltiness: The saltiness of this InlineResponse2008.  # noqa: E501
        :type: float
        """
        if saltiness is None:
            raise ValueError("Invalid value for `saltiness`, must not be `None`")  # noqa: E501

        self._saltiness = saltiness

    @property
    def sourness(self):
        """Gets the sourness of this InlineResponse2008.  # noqa: E501


        :return: The sourness of this InlineResponse2008.  # noqa: E501
        :rtype: float
        """
        return self._sourness

    @sourness.setter
    def sourness(self, sourness):
        """Sets the sourness of this InlineResponse2008.


        :param sourness: The sourness of this InlineResponse2008.  # noqa: E501
        :type: float
        """
        if sourness is None:
            raise ValueError("Invalid value for `sourness`, must not be `None`")  # noqa: E501

        self._sourness = sourness

    @property
    def bitterness(self):
        """Gets the bitterness of this InlineResponse2008.  # noqa: E501


        :return: The bitterness of this InlineResponse2008.  # noqa: E501
        :rtype: float
        """
        return self._bitterness

    @bitterness.setter
    def bitterness(self, bitterness):
        """Sets the bitterness of this InlineResponse2008.


        :param bitterness: The bitterness of this InlineResponse2008.  # noqa: E501
        :type: float
        """
        if bitterness is None:
            raise ValueError("Invalid value for `bitterness`, must not be `None`")  # noqa: E501

        self._bitterness = bitterness

    @property
    def savoriness(self):
        """Gets the savoriness of this InlineResponse2008.  # noqa: E501


        :return: The savoriness of this InlineResponse2008.  # noqa: E501
        :rtype: float
        """
        return self._savoriness

    @savoriness.setter
    def savoriness(self, savoriness):
        """Sets the savoriness of this InlineResponse2008.


        :param savoriness: The savoriness of this InlineResponse2008.  # noqa: E501
        :type: float
        """
        if savoriness is None:
            raise ValueError("Invalid value for `savoriness`, must not be `None`")  # noqa: E501

        self._savoriness = savoriness

    @property
    def fattiness(self):
        """Gets the fattiness of this InlineResponse2008.  # noqa: E501


        :return: The fattiness of this InlineResponse2008.  # noqa: E501
        :rtype: float
        """
        return self._fattiness

    @fattiness.setter
    def fattiness(self, fattiness):
        """Sets the fattiness of this InlineResponse2008.


        :param fattiness: The fattiness of this InlineResponse2008.  # noqa: E501
        :type: float
        """
        if fattiness is None:
            raise ValueError("Invalid value for `fattiness`, must not be `None`")  # noqa: E501

        self._fattiness = fattiness

    @property
    def spiciness(self):
        """Gets the spiciness of this InlineResponse2008.  # noqa: E501


        :return: The spiciness of this InlineResponse2008.  # noqa: E501
        :rtype: float
        """
        return self._spiciness

    @spiciness.setter
    def spiciness(self, spiciness):
        """Sets the spiciness of this InlineResponse2008.


        :param spiciness: The spiciness of this InlineResponse2008.  # noqa: E501
        :type: float
        """
        if spiciness is None:
            raise ValueError("Invalid value for `spiciness`, must not be `None`")  # noqa: E501

        self._spiciness = spiciness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
