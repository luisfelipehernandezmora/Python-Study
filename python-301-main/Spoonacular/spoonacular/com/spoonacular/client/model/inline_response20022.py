# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20022(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'original': 'str',
        'original_name': 'str',
        'name': 'str',
        'name_clean': 'str',
        'amount': 'float',
        'unit': 'str',
        'unit_short': 'str',
        'unit_long': 'str',
        'possible_units': 'list[str]',
        'estimated_cost': 'RecipesParseIngredientsEstimatedCost',
        'consistency': 'str',
        'shopping_list_units': 'list[str]',
        'aisle': 'str',
        'image': 'str',
        'meta': 'list[object]',
        'nutrition': 'InlineResponse20022Nutrition',
        'category_path': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'original': 'original',
        'original_name': 'originalName',
        'name': 'name',
        'name_clean': 'nameClean',
        'amount': 'amount',
        'unit': 'unit',
        'unit_short': 'unitShort',
        'unit_long': 'unitLong',
        'possible_units': 'possibleUnits',
        'estimated_cost': 'estimatedCost',
        'consistency': 'consistency',
        'shopping_list_units': 'shoppingListUnits',
        'aisle': 'aisle',
        'image': 'image',
        'meta': 'meta',
        'nutrition': 'nutrition',
        'category_path': 'categoryPath'
    }

    def __init__(self, id=None, original=None, original_name=None, name=None, name_clean=None, amount=None, unit=None, unit_short=None, unit_long=None, possible_units=None, estimated_cost=None, consistency=None, shopping_list_units=None, aisle=None, image=None, meta=None, nutrition=None, category_path=None):  # noqa: E501
        """InlineResponse20022 - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._original = None
        self._original_name = None
        self._name = None
        self._name_clean = None
        self._amount = None
        self._unit = None
        self._unit_short = None
        self._unit_long = None
        self._possible_units = None
        self._estimated_cost = None
        self._consistency = None
        self._shopping_list_units = None
        self._aisle = None
        self._image = None
        self._meta = None
        self._nutrition = None
        self._category_path = None
        self.discriminator = None

        self.id = id
        self.original = original
        self.original_name = original_name
        self.name = name
        self.name_clean = name_clean
        self.amount = amount
        self.unit = unit
        self.unit_short = unit_short
        self.unit_long = unit_long
        self.possible_units = possible_units
        self.estimated_cost = estimated_cost
        self.consistency = consistency
        self.shopping_list_units = shopping_list_units
        self.aisle = aisle
        self.image = image
        self.meta = meta
        self.nutrition = nutrition
        self.category_path = category_path

    @property
    def id(self):
        """Gets the id of this InlineResponse20022.  # noqa: E501


        :return: The id of this InlineResponse20022.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20022.


        :param id: The id of this InlineResponse20022.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def original(self):
        """Gets the original of this InlineResponse20022.  # noqa: E501


        :return: The original of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this InlineResponse20022.


        :param original: The original of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if original is None:
            raise ValueError("Invalid value for `original`, must not be `None`")  # noqa: E501
        if original is not None and len(original) < 1:
            raise ValueError("Invalid value for `original`, length must be greater than or equal to `1`")  # noqa: E501

        self._original = original

    @property
    def original_name(self):
        """Gets the original_name of this InlineResponse20022.  # noqa: E501


        :return: The original_name of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this InlineResponse20022.


        :param original_name: The original_name of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if original_name is None:
            raise ValueError("Invalid value for `original_name`, must not be `None`")  # noqa: E501
        if original_name is not None and len(original_name) < 1:
            raise ValueError("Invalid value for `original_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._original_name = original_name

    @property
    def name(self):
        """Gets the name of this InlineResponse20022.  # noqa: E501


        :return: The name of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20022.


        :param name: The name of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def name_clean(self):
        """Gets the name_clean of this InlineResponse20022.  # noqa: E501


        :return: The name_clean of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._name_clean

    @name_clean.setter
    def name_clean(self, name_clean):
        """Sets the name_clean of this InlineResponse20022.


        :param name_clean: The name_clean of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if name_clean is None:
            raise ValueError("Invalid value for `name_clean`, must not be `None`")  # noqa: E501
        if name_clean is not None and len(name_clean) < 1:
            raise ValueError("Invalid value for `name_clean`, length must be greater than or equal to `1`")  # noqa: E501

        self._name_clean = name_clean

    @property
    def amount(self):
        """Gets the amount of this InlineResponse20022.  # noqa: E501


        :return: The amount of this InlineResponse20022.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse20022.


        :param amount: The amount of this InlineResponse20022.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def unit(self):
        """Gets the unit of this InlineResponse20022.  # noqa: E501


        :return: The unit of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InlineResponse20022.


        :param unit: The unit of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def unit_short(self):
        """Gets the unit_short of this InlineResponse20022.  # noqa: E501


        :return: The unit_short of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._unit_short

    @unit_short.setter
    def unit_short(self, unit_short):
        """Sets the unit_short of this InlineResponse20022.


        :param unit_short: The unit_short of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if unit_short is None:
            raise ValueError("Invalid value for `unit_short`, must not be `None`")  # noqa: E501

        self._unit_short = unit_short

    @property
    def unit_long(self):
        """Gets the unit_long of this InlineResponse20022.  # noqa: E501


        :return: The unit_long of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._unit_long

    @unit_long.setter
    def unit_long(self, unit_long):
        """Sets the unit_long of this InlineResponse20022.


        :param unit_long: The unit_long of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if unit_long is None:
            raise ValueError("Invalid value for `unit_long`, must not be `None`")  # noqa: E501

        self._unit_long = unit_long

    @property
    def possible_units(self):
        """Gets the possible_units of this InlineResponse20022.  # noqa: E501


        :return: The possible_units of this InlineResponse20022.  # noqa: E501
        :rtype: list[str]
        """
        return self._possible_units

    @possible_units.setter
    def possible_units(self, possible_units):
        """Sets the possible_units of this InlineResponse20022.


        :param possible_units: The possible_units of this InlineResponse20022.  # noqa: E501
        :type: list[str]
        """
        if possible_units is None:
            raise ValueError("Invalid value for `possible_units`, must not be `None`")  # noqa: E501

        self._possible_units = possible_units

    @property
    def estimated_cost(self):
        """Gets the estimated_cost of this InlineResponse20022.  # noqa: E501


        :return: The estimated_cost of this InlineResponse20022.  # noqa: E501
        :rtype: RecipesParseIngredientsEstimatedCost
        """
        return self._estimated_cost

    @estimated_cost.setter
    def estimated_cost(self, estimated_cost):
        """Sets the estimated_cost of this InlineResponse20022.


        :param estimated_cost: The estimated_cost of this InlineResponse20022.  # noqa: E501
        :type: RecipesParseIngredientsEstimatedCost
        """
        if estimated_cost is None:
            raise ValueError("Invalid value for `estimated_cost`, must not be `None`")  # noqa: E501

        self._estimated_cost = estimated_cost

    @property
    def consistency(self):
        """Gets the consistency of this InlineResponse20022.  # noqa: E501


        :return: The consistency of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._consistency

    @consistency.setter
    def consistency(self, consistency):
        """Sets the consistency of this InlineResponse20022.


        :param consistency: The consistency of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if consistency is None:
            raise ValueError("Invalid value for `consistency`, must not be `None`")  # noqa: E501
        if consistency is not None and len(consistency) < 1:
            raise ValueError("Invalid value for `consistency`, length must be greater than or equal to `1`")  # noqa: E501

        self._consistency = consistency

    @property
    def shopping_list_units(self):
        """Gets the shopping_list_units of this InlineResponse20022.  # noqa: E501


        :return: The shopping_list_units of this InlineResponse20022.  # noqa: E501
        :rtype: list[str]
        """
        return self._shopping_list_units

    @shopping_list_units.setter
    def shopping_list_units(self, shopping_list_units):
        """Sets the shopping_list_units of this InlineResponse20022.


        :param shopping_list_units: The shopping_list_units of this InlineResponse20022.  # noqa: E501
        :type: list[str]
        """
        if shopping_list_units is None:
            raise ValueError("Invalid value for `shopping_list_units`, must not be `None`")  # noqa: E501

        self._shopping_list_units = shopping_list_units

    @property
    def aisle(self):
        """Gets the aisle of this InlineResponse20022.  # noqa: E501


        :return: The aisle of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this InlineResponse20022.


        :param aisle: The aisle of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")  # noqa: E501
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")  # noqa: E501

        self._aisle = aisle

    @property
    def image(self):
        """Gets the image of this InlineResponse20022.  # noqa: E501


        :return: The image of this InlineResponse20022.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this InlineResponse20022.


        :param image: The image of this InlineResponse20022.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")  # noqa: E501

        self._image = image

    @property
    def meta(self):
        """Gets the meta of this InlineResponse20022.  # noqa: E501


        :return: The meta of this InlineResponse20022.  # noqa: E501
        :rtype: list[object]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this InlineResponse20022.


        :param meta: The meta of this InlineResponse20022.  # noqa: E501
        :type: list[object]
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def nutrition(self):
        """Gets the nutrition of this InlineResponse20022.  # noqa: E501


        :return: The nutrition of this InlineResponse20022.  # noqa: E501
        :rtype: InlineResponse20022Nutrition
        """
        return self._nutrition

    @nutrition.setter
    def nutrition(self, nutrition):
        """Sets the nutrition of this InlineResponse20022.


        :param nutrition: The nutrition of this InlineResponse20022.  # noqa: E501
        :type: InlineResponse20022Nutrition
        """
        if nutrition is None:
            raise ValueError("Invalid value for `nutrition`, must not be `None`")  # noqa: E501

        self._nutrition = nutrition

    @property
    def category_path(self):
        """Gets the category_path of this InlineResponse20022.  # noqa: E501


        :return: The category_path of this InlineResponse20022.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_path

    @category_path.setter
    def category_path(self, category_path):
        """Sets the category_path of this InlineResponse20022.


        :param category_path: The category_path of this InlineResponse20022.  # noqa: E501
        :type: list[str]
        """
        if category_path is None:
            raise ValueError("Invalid value for `category_path`, must not be `None`")  # noqa: E501

        self._category_path = category_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
