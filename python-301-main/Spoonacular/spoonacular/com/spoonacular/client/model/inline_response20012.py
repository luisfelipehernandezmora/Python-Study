# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20012(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'calories': 'str',
        'carbs': 'str',
        'fat': 'str',
        'protein': 'str',
        'bad': 'list[object]',
        'good': 'list[object]'
    }

    attribute_map = {
        'calories': 'calories',
        'carbs': 'carbs',
        'fat': 'fat',
        'protein': 'protein',
        'bad': 'bad',
        'good': 'good'
    }

    def __init__(self, calories=None, carbs=None, fat=None, protein=None, bad=None, good=None):  # noqa: E501
        """InlineResponse20012 - a model defined in OpenAPI"""  # noqa: E501

        self._calories = None
        self._carbs = None
        self._fat = None
        self._protein = None
        self._bad = None
        self._good = None
        self.discriminator = None

        self.calories = calories
        self.carbs = carbs
        self.fat = fat
        self.protein = protein
        self.bad = bad
        self.good = good

    @property
    def calories(self):
        """Gets the calories of this InlineResponse20012.  # noqa: E501


        :return: The calories of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this InlineResponse20012.


        :param calories: The calories of this InlineResponse20012.  # noqa: E501
        :type: str
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")  # noqa: E501
        if calories is not None and len(calories) < 1:
            raise ValueError("Invalid value for `calories`, length must be greater than or equal to `1`")  # noqa: E501

        self._calories = calories

    @property
    def carbs(self):
        """Gets the carbs of this InlineResponse20012.  # noqa: E501


        :return: The carbs of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._carbs

    @carbs.setter
    def carbs(self, carbs):
        """Sets the carbs of this InlineResponse20012.


        :param carbs: The carbs of this InlineResponse20012.  # noqa: E501
        :type: str
        """
        if carbs is None:
            raise ValueError("Invalid value for `carbs`, must not be `None`")  # noqa: E501
        if carbs is not None and len(carbs) < 1:
            raise ValueError("Invalid value for `carbs`, length must be greater than or equal to `1`")  # noqa: E501

        self._carbs = carbs

    @property
    def fat(self):
        """Gets the fat of this InlineResponse20012.  # noqa: E501


        :return: The fat of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._fat

    @fat.setter
    def fat(self, fat):
        """Sets the fat of this InlineResponse20012.


        :param fat: The fat of this InlineResponse20012.  # noqa: E501
        :type: str
        """
        if fat is None:
            raise ValueError("Invalid value for `fat`, must not be `None`")  # noqa: E501
        if fat is not None and len(fat) < 1:
            raise ValueError("Invalid value for `fat`, length must be greater than or equal to `1`")  # noqa: E501

        self._fat = fat

    @property
    def protein(self):
        """Gets the protein of this InlineResponse20012.  # noqa: E501


        :return: The protein of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this InlineResponse20012.


        :param protein: The protein of this InlineResponse20012.  # noqa: E501
        :type: str
        """
        if protein is None:
            raise ValueError("Invalid value for `protein`, must not be `None`")  # noqa: E501
        if protein is not None and len(protein) < 1:
            raise ValueError("Invalid value for `protein`, length must be greater than or equal to `1`")  # noqa: E501

        self._protein = protein

    @property
    def bad(self):
        """Gets the bad of this InlineResponse20012.  # noqa: E501


        :return: The bad of this InlineResponse20012.  # noqa: E501
        :rtype: list[object]
        """
        return self._bad

    @bad.setter
    def bad(self, bad):
        """Sets the bad of this InlineResponse20012.


        :param bad: The bad of this InlineResponse20012.  # noqa: E501
        :type: list[object]
        """
        if bad is None:
            raise ValueError("Invalid value for `bad`, must not be `None`")  # noqa: E501

        self._bad = bad

    @property
    def good(self):
        """Gets the good of this InlineResponse20012.  # noqa: E501


        :return: The good of this InlineResponse20012.  # noqa: E501
        :rtype: list[object]
        """
        return self._good

    @good.setter
    def good(self, good):
        """Sets the good of this InlineResponse20012.


        :param good: The good of this InlineResponse20012.  # noqa: E501
        :type: list[object]
        """
        if good is None:
            raise ValueError("Invalid value for `good`, must not be `None`")  # noqa: E501

        self._good = good

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
