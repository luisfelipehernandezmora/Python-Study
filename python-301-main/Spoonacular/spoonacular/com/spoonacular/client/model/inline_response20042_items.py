# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20042Items(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'measures': 'InlineResponse20042Measures',
        'pantry_item': 'bool',
        'aisle': 'str',
        'cost': 'float',
        'ingredient_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'measures': 'measures',
        'pantry_item': 'pantryItem',
        'aisle': 'aisle',
        'cost': 'cost',
        'ingredient_id': 'ingredientId'
    }

    def __init__(self, id=None, name=None, measures=None, pantry_item=None, aisle=None, cost=None, ingredient_id=None):  # noqa: E501
        """InlineResponse20042Items - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._measures = None
        self._pantry_item = None
        self._aisle = None
        self._cost = None
        self._ingredient_id = None
        self.discriminator = None

        self.id = id
        self.name = name
        if measures is not None:
            self.measures = measures
        self.pantry_item = pantry_item
        self.aisle = aisle
        self.cost = cost
        self.ingredient_id = ingredient_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20042Items.  # noqa: E501


        :return: The id of this InlineResponse20042Items.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20042Items.


        :param id: The id of this InlineResponse20042Items.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20042Items.  # noqa: E501


        :return: The name of this InlineResponse20042Items.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20042Items.


        :param name: The name of this InlineResponse20042Items.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def measures(self):
        """Gets the measures of this InlineResponse20042Items.  # noqa: E501


        :return: The measures of this InlineResponse20042Items.  # noqa: E501
        :rtype: InlineResponse20042Measures
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this InlineResponse20042Items.


        :param measures: The measures of this InlineResponse20042Items.  # noqa: E501
        :type: InlineResponse20042Measures
        """

        self._measures = measures

    @property
    def pantry_item(self):
        """Gets the pantry_item of this InlineResponse20042Items.  # noqa: E501


        :return: The pantry_item of this InlineResponse20042Items.  # noqa: E501
        :rtype: bool
        """
        return self._pantry_item

    @pantry_item.setter
    def pantry_item(self, pantry_item):
        """Sets the pantry_item of this InlineResponse20042Items.


        :param pantry_item: The pantry_item of this InlineResponse20042Items.  # noqa: E501
        :type: bool
        """
        if pantry_item is None:
            raise ValueError("Invalid value for `pantry_item`, must not be `None`")  # noqa: E501

        self._pantry_item = pantry_item

    @property
    def aisle(self):
        """Gets the aisle of this InlineResponse20042Items.  # noqa: E501


        :return: The aisle of this InlineResponse20042Items.  # noqa: E501
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this InlineResponse20042Items.


        :param aisle: The aisle of this InlineResponse20042Items.  # noqa: E501
        :type: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")  # noqa: E501
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")  # noqa: E501

        self._aisle = aisle

    @property
    def cost(self):
        """Gets the cost of this InlineResponse20042Items.  # noqa: E501


        :return: The cost of this InlineResponse20042Items.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this InlineResponse20042Items.


        :param cost: The cost of this InlineResponse20042Items.  # noqa: E501
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def ingredient_id(self):
        """Gets the ingredient_id of this InlineResponse20042Items.  # noqa: E501


        :return: The ingredient_id of this InlineResponse20042Items.  # noqa: E501
        :rtype: int
        """
        return self._ingredient_id

    @ingredient_id.setter
    def ingredient_id(self, ingredient_id):
        """Sets the ingredient_id of this InlineResponse20042Items.


        :param ingredient_id: The ingredient_id of this InlineResponse20042Items.  # noqa: E501
        :type: int
        """
        if ingredient_id is None:
            raise ValueError("Invalid value for `ingredient_id`, must not be `None`")  # noqa: E501

        self._ingredient_id = ingredient_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20042Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
