# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20031ComparableProducts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'calories': 'list[object]',
        'likes': 'list[object]',
        'price': 'list[object]',
        'protein': 'list[InlineResponse20031ComparableProductsProtein]',
        'spoonacular_score': 'list[InlineResponse20031ComparableProductsProtein]',
        'sugar': 'list[object]'
    }

    attribute_map = {
        'calories': 'calories',
        'likes': 'likes',
        'price': 'price',
        'protein': 'protein',
        'spoonacular_score': 'spoonacularScore',
        'sugar': 'sugar'
    }

    def __init__(self, calories=None, likes=None, price=None, protein=None, spoonacular_score=None, sugar=None):  # noqa: E501
        """InlineResponse20031ComparableProducts - a model defined in OpenAPI"""  # noqa: E501

        self._calories = None
        self._likes = None
        self._price = None
        self._protein = None
        self._spoonacular_score = None
        self._sugar = None
        self.discriminator = None

        self.calories = calories
        self.likes = likes
        self.price = price
        self.protein = protein
        self.spoonacular_score = spoonacular_score
        self.sugar = sugar

    @property
    def calories(self):
        """Gets the calories of this InlineResponse20031ComparableProducts.  # noqa: E501


        :return: The calories of this InlineResponse20031ComparableProducts.  # noqa: E501
        :rtype: list[object]
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this InlineResponse20031ComparableProducts.


        :param calories: The calories of this InlineResponse20031ComparableProducts.  # noqa: E501
        :type: list[object]
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")  # noqa: E501

        self._calories = calories

    @property
    def likes(self):
        """Gets the likes of this InlineResponse20031ComparableProducts.  # noqa: E501


        :return: The likes of this InlineResponse20031ComparableProducts.  # noqa: E501
        :rtype: list[object]
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this InlineResponse20031ComparableProducts.


        :param likes: The likes of this InlineResponse20031ComparableProducts.  # noqa: E501
        :type: list[object]
        """
        if likes is None:
            raise ValueError("Invalid value for `likes`, must not be `None`")  # noqa: E501

        self._likes = likes

    @property
    def price(self):
        """Gets the price of this InlineResponse20031ComparableProducts.  # noqa: E501


        :return: The price of this InlineResponse20031ComparableProducts.  # noqa: E501
        :rtype: list[object]
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InlineResponse20031ComparableProducts.


        :param price: The price of this InlineResponse20031ComparableProducts.  # noqa: E501
        :type: list[object]
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def protein(self):
        """Gets the protein of this InlineResponse20031ComparableProducts.  # noqa: E501


        :return: The protein of this InlineResponse20031ComparableProducts.  # noqa: E501
        :rtype: list[InlineResponse20031ComparableProductsProtein]
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this InlineResponse20031ComparableProducts.


        :param protein: The protein of this InlineResponse20031ComparableProducts.  # noqa: E501
        :type: list[InlineResponse20031ComparableProductsProtein]
        """
        if protein is None:
            raise ValueError("Invalid value for `protein`, must not be `None`")  # noqa: E501

        self._protein = protein

    @property
    def spoonacular_score(self):
        """Gets the spoonacular_score of this InlineResponse20031ComparableProducts.  # noqa: E501


        :return: The spoonacular_score of this InlineResponse20031ComparableProducts.  # noqa: E501
        :rtype: list[InlineResponse20031ComparableProductsProtein]
        """
        return self._spoonacular_score

    @spoonacular_score.setter
    def spoonacular_score(self, spoonacular_score):
        """Sets the spoonacular_score of this InlineResponse20031ComparableProducts.


        :param spoonacular_score: The spoonacular_score of this InlineResponse20031ComparableProducts.  # noqa: E501
        :type: list[InlineResponse20031ComparableProductsProtein]
        """
        if spoonacular_score is None:
            raise ValueError("Invalid value for `spoonacular_score`, must not be `None`")  # noqa: E501

        self._spoonacular_score = spoonacular_score

    @property
    def sugar(self):
        """Gets the sugar of this InlineResponse20031ComparableProducts.  # noqa: E501


        :return: The sugar of this InlineResponse20031ComparableProducts.  # noqa: E501
        :rtype: list[object]
        """
        return self._sugar

    @sugar.setter
    def sugar(self, sugar):
        """Sets the sugar of this InlineResponse20031ComparableProducts.


        :param sugar: The sugar of this InlineResponse20031ComparableProducts.  # noqa: E501
        :type: list[object]
        """
        if sugar is None:
            raise ValueError("Invalid value for `sugar`, must not be `None`")  # noqa: E501

        self._sugar = sugar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20031ComparableProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
