# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20049NutritionCalories(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'value': 'float',
        'unit': 'str',
        'confidence_range95_percent': 'InlineResponse20049NutritionCaloriesConfidenceRange95Percent',
        'standard_deviation': 'float'
    }

    attribute_map = {
        'value': 'value',
        'unit': 'unit',
        'confidence_range95_percent': 'confidenceRange95Percent',
        'standard_deviation': 'standardDeviation'
    }

    def __init__(self, value=None, unit=None, confidence_range95_percent=None, standard_deviation=None):  # noqa: E501
        """InlineResponse20049NutritionCalories - a model defined in OpenAPI"""  # noqa: E501

        self._value = None
        self._unit = None
        self._confidence_range95_percent = None
        self._standard_deviation = None
        self.discriminator = None

        self.value = value
        self.unit = unit
        self.confidence_range95_percent = confidence_range95_percent
        self.standard_deviation = standard_deviation

    @property
    def value(self):
        """Gets the value of this InlineResponse20049NutritionCalories.  # noqa: E501


        :return: The value of this InlineResponse20049NutritionCalories.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InlineResponse20049NutritionCalories.


        :param value: The value of this InlineResponse20049NutritionCalories.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this InlineResponse20049NutritionCalories.  # noqa: E501


        :return: The unit of this InlineResponse20049NutritionCalories.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InlineResponse20049NutritionCalories.


        :param unit: The unit of this InlineResponse20049NutritionCalories.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501
        if unit is not None and len(unit) < 1:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")  # noqa: E501

        self._unit = unit

    @property
    def confidence_range95_percent(self):
        """Gets the confidence_range95_percent of this InlineResponse20049NutritionCalories.  # noqa: E501


        :return: The confidence_range95_percent of this InlineResponse20049NutritionCalories.  # noqa: E501
        :rtype: InlineResponse20049NutritionCaloriesConfidenceRange95Percent
        """
        return self._confidence_range95_percent

    @confidence_range95_percent.setter
    def confidence_range95_percent(self, confidence_range95_percent):
        """Sets the confidence_range95_percent of this InlineResponse20049NutritionCalories.


        :param confidence_range95_percent: The confidence_range95_percent of this InlineResponse20049NutritionCalories.  # noqa: E501
        :type: InlineResponse20049NutritionCaloriesConfidenceRange95Percent
        """
        if confidence_range95_percent is None:
            raise ValueError("Invalid value for `confidence_range95_percent`, must not be `None`")  # noqa: E501

        self._confidence_range95_percent = confidence_range95_percent

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this InlineResponse20049NutritionCalories.  # noqa: E501


        :return: The standard_deviation of this InlineResponse20049NutritionCalories.  # noqa: E501
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this InlineResponse20049NutritionCalories.


        :param standard_deviation: The standard_deviation of this InlineResponse20049NutritionCalories.  # noqa: E501
        :type: float
        """
        if standard_deviation is None:
            raise ValueError("Invalid value for `standard_deviation`, must not be `None`")  # noqa: E501

        self._standard_deviation = standard_deviation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20049NutritionCalories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
