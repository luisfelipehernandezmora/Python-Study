# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spoonacular.api_client import ApiClient
from spoonacular.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MiscApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def detect_food_in_text(self, **kwargs):  # noqa: E501
        """Detect Food in Text  # noqa: E501

        Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detect_food_in_text(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: The content type.
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detect_food_in_text_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.detect_food_in_text_with_http_info(**kwargs)  # noqa: E501
            return data

    def detect_food_in_text_with_http_info(self, **kwargs):  # noqa: E501
        """Detect Food in Text  # noqa: E501

        Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detect_food_in_text_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: The content type.
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detect_food_in_text" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_type' in local_var_params:
            header_params['Content-Type'] = local_var_params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/detect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20051',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_random_food_joke(self, **kwargs):  # noqa: E501
        """Random Food Joke  # noqa: E501

        Get a random joke that is related to food. Caution: this is an endpoint for adults!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_random_food_joke(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_random_food_joke_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_a_random_food_joke_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_a_random_food_joke_with_http_info(self, **kwargs):  # noqa: E501
        """Random Food Joke  # noqa: E501

        Get a random joke that is related to food. Caution: this is an endpoint for adults!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_random_food_joke_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_random_food_joke" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/jokes/random', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_suggests(self, query, **kwargs):  # noqa: E501
        """Conversation Suggests  # noqa: E501

        This endpoint returns suggestions for things the user can say or ask the chatbot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_suggests(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
        :param float number: The number of suggestions to return (between 1 and 25).
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_suggests_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_suggests_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_conversation_suggests_with_http_info(self, query, **kwargs):  # noqa: E501
        """Conversation Suggests  # noqa: E501

        This endpoint returns suggestions for things the user can say or ask the chatbot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_suggests_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: A (partial) query from the user. The endpoint will return if it matches topics it can talk about. (required)
        :param float number: The number of suggestions to return (between 1 and 25).
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_suggests" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ApiValueError("Missing the required parameter `query` when calling `get_conversation_suggests`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/converse/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20057',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_random_food_trivia(self, **kwargs):  # noqa: E501
        """Random Food Trivia  # noqa: E501

        Returns random food trivia.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_food_trivia(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_random_food_trivia_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_random_food_trivia_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_random_food_trivia_with_http_info(self, **kwargs):  # noqa: E501
        """Random Food Trivia  # noqa: E501

        Returns random food trivia.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_food_trivia_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_random_food_trivia" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/trivia/random', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def image_analysis_by_url(self, image_url, **kwargs):  # noqa: E501
        """Image Analysis by URL  # noqa: E501

        Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.image_analysis_by_url(image_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_url: The URL of the image to be analyzed. (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.image_analysis_by_url_with_http_info(image_url, **kwargs)  # noqa: E501
        else:
            (data) = self.image_analysis_by_url_with_http_info(image_url, **kwargs)  # noqa: E501
            return data

    def image_analysis_by_url_with_http_info(self, image_url, **kwargs):  # noqa: E501
        """Image Analysis by URL  # noqa: E501

        Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.image_analysis_by_url_with_http_info(image_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_url: The URL of the image to be analyzed. (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['image_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_analysis_by_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'image_url' is set
        if ('image_url' not in local_var_params or
                local_var_params['image_url'] is None):
            raise ApiValueError("Missing the required parameter `image_url` when calling `image_analysis_by_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'image_url' in local_var_params:
            query_params.append(('imageUrl', local_var_params['image_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/images/analyze', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def image_classification_by_url(self, image_url, **kwargs):  # noqa: E501
        """Image Classification by URL  # noqa: E501

        Classify a food image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.image_classification_by_url(image_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_url: The URL of the image to be classified. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.image_classification_by_url_with_http_info(image_url, **kwargs)  # noqa: E501
        else:
            (data) = self.image_classification_by_url_with_http_info(image_url, **kwargs)  # noqa: E501
            return data

    def image_classification_by_url_with_http_info(self, image_url, **kwargs):  # noqa: E501
        """Image Classification by URL  # noqa: E501

        Classify a food image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.image_classification_by_url_with_http_info(image_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_url: The URL of the image to be classified. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['image_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_classification_by_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'image_url' is set
        if ('image_url' not in local_var_params or
                local_var_params['image_url'] is None):
            raise ApiValueError("Missing the required parameter `image_url` when calling `image_classification_by_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'image_url' in local_var_params:
            query_params.append(('imageUrl', local_var_params['image_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/images/classify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_all_food(self, query, **kwargs):  # noqa: E501
        """Search All Food  # noqa: E501

        Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_all_food(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The search query. (required)
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_all_food_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_all_food_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def search_all_food_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search All Food  # noqa: E501

        Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_all_food_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The search query. (required)
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'offset', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_all_food" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ApiValueError("Missing the required parameter `query` when calling `search_all_food`")  # noqa: E501

        if 'offset' in local_var_params and local_var_params['offset'] > 900:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_all_food`, must be a value less than or equal to `900`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_all_food`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_all_food`, must be a value less than or equal to `100`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_all_food`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20053',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_custom_foods(self, username, hash, **kwargs):  # noqa: E501
        """Search Custom Foods  # noqa: E501

        Search custom foods in a user's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_custom_foods(username, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param str query: The (natural language) search query.
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_custom_foods_with_http_info(username, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.search_custom_foods_with_http_info(username, hash, **kwargs)  # noqa: E501
            return data

    def search_custom_foods_with_http_info(self, username, hash, **kwargs):  # noqa: E501
        """Search Custom Foods  # noqa: E501

        Search custom foods in a user's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_custom_foods_with_http_info(username, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param str query: The (natural language) search query.
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'hash', 'query', 'offset', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_custom_foods" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `search_custom_foods`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `search_custom_foods`")  # noqa: E501

        if 'offset' in local_var_params and local_var_params['offset'] > 900:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_custom_foods`, must be a value less than or equal to `900`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_custom_foods`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_custom_foods`, must be a value less than or equal to `100`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_custom_foods`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'username' in local_var_params:
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/customFoods/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_food_videos(self, **kwargs):  # noqa: E501
        """Search Food Videos  # noqa: E501

        Find recipe and other food related videos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_food_videos(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param str type: The type of the recipes. See a full list of supported meal types.
        :param str cuisine: The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
        :param str diet: The diet for which the recipes must be suitable. See a full list of supported diets.
        :param str include_ingredients: A comma-separated list of ingredients that the recipes should contain.
        :param str exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :param float min_length: Minimum video length in seconds.
        :param float max_length: Maximum video length in seconds.
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_food_videos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_food_videos_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_food_videos_with_http_info(self, **kwargs):  # noqa: E501
        """Search Food Videos  # noqa: E501

        Find recipe and other food related videos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_food_videos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param str type: The type of the recipes. See a full list of supported meal types.
        :param str cuisine: The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
        :param str diet: The diet for which the recipes must be suitable. See a full list of supported diets.
        :param str include_ingredients: A comma-separated list of ingredients that the recipes should contain.
        :param str exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :param float min_length: Minimum video length in seconds.
        :param float max_length: Maximum video length in seconds.
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'type', 'cuisine', 'diet', 'include_ingredients', 'exclude_ingredients', 'min_length', 'max_length', 'offset', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_food_videos" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'offset' in local_var_params and local_var_params['offset'] > 900:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_food_videos`, must be a value less than or equal to `900`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `search_food_videos`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_food_videos`, must be a value less than or equal to `100`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `search_food_videos`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'cuisine' in local_var_params:
            query_params.append(('cuisine', local_var_params['cuisine']))  # noqa: E501
        if 'diet' in local_var_params:
            query_params.append(('diet', local_var_params['diet']))  # noqa: E501
        if 'include_ingredients' in local_var_params:
            query_params.append(('includeIngredients', local_var_params['include_ingredients']))  # noqa: E501
        if 'exclude_ingredients' in local_var_params:
            query_params.append(('excludeIngredients', local_var_params['exclude_ingredients']))  # noqa: E501
        if 'min_length' in local_var_params:
            query_params.append(('minLength', local_var_params['min_length']))  # noqa: E501
        if 'max_length' in local_var_params:
            query_params.append(('maxLength', local_var_params['max_length']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/videos/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20054',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_site_content(self, query, **kwargs):  # noqa: E501
        """Search Site Content  # noqa: E501

        Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_site_content(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content. (required)
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_site_content_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_site_content_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def search_site_content_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search Site Content  # noqa: E501

        Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_site_content_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content. (required)
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_site_content" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ApiValueError("Missing the required parameter `query` when calling `search_site_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/site/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20052',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def talk_to_chatbot(self, text, **kwargs):  # noqa: E501
        """Talk to Chatbot  # noqa: E501

        This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.talk_to_chatbot(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The request / question / answer from the user to the chatbot. (required)
        :param str context_id: An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.talk_to_chatbot_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.talk_to_chatbot_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def talk_to_chatbot_with_http_info(self, text, **kwargs):  # noqa: E501
        """Talk to Chatbot  # noqa: E501

        This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.talk_to_chatbot_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The request / question / answer from the user to the chatbot. (required)
        :param str context_id: An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['text', 'context_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method talk_to_chatbot" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in local_var_params or
                local_var_params['text'] is None):
            raise ApiValueError("Missing the required parameter `text` when calling `talk_to_chatbot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501
        if 'context_id' in local_var_params:
            query_params.append(('contextId', local_var_params['context_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/converse', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
