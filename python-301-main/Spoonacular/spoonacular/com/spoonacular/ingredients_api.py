# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spoonacular.api_client import ApiClient
from spoonacular.exceptions import (
    ApiTypeError,
    ApiValueError
)


class IngredientsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def autocomplete_ingredient_search(self, **kwargs):  # noqa: E501
        """Autocomplete Ingredient Search  # noqa: E501

        Autocomplete the entry of an ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_ingredient_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :param bool meta_information: Whether to return more meta information about the ingredients.
        :param str intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
        :return: list[InlineResponse20024]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.autocomplete_ingredient_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.autocomplete_ingredient_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def autocomplete_ingredient_search_with_http_info(self, **kwargs):  # noqa: E501
        """Autocomplete Ingredient Search  # noqa: E501

        Autocomplete the entry of an ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_ingredient_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :param bool meta_information: Whether to return more meta information about the ingredients.
        :param str intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
        :return: list[InlineResponse20024]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'number', 'meta_information', 'intolerances']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method autocomplete_ingredient_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'number' in local_var_params and local_var_params['number'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `autocomplete_ingredient_search`, must be a value less than or equal to `100`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `autocomplete_ingredient_search`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501
        if 'meta_information' in local_var_params:
            query_params.append(('metaInformation', local_var_params['meta_information']))  # noqa: E501
        if 'intolerances' in local_var_params:
            query_params.append(('intolerances', local_var_params['intolerances']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/ingredients/autocomplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20024]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compute_ingredient_amount(self, id, nutrient, target, **kwargs):  # noqa: E501
        """Compute Ingredient Amount  # noqa: E501

        Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compute_ingredient_amount(id, nutrient, target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The id of the ingredient you want the amount for. (required)
        :param str nutrient: The target nutrient. See a list of supported nutrients. (required)
        :param float target: The target number of the given nutrient. (required)
        :param str unit: The target unit.
        :return: RecipesParseIngredientsNutritionWeightPerServing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.compute_ingredient_amount_with_http_info(id, nutrient, target, **kwargs)  # noqa: E501
        else:
            (data) = self.compute_ingredient_amount_with_http_info(id, nutrient, target, **kwargs)  # noqa: E501
            return data

    def compute_ingredient_amount_with_http_info(self, id, nutrient, target, **kwargs):  # noqa: E501
        """Compute Ingredient Amount  # noqa: E501

        Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compute_ingredient_amount_with_http_info(id, nutrient, target, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The id of the ingredient you want the amount for. (required)
        :param str nutrient: The target nutrient. See a list of supported nutrients. (required)
        :param float target: The target number of the given nutrient. (required)
        :param str unit: The target unit.
        :return: RecipesParseIngredientsNutritionWeightPerServing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'nutrient', 'target', 'unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_ingredient_amount" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `compute_ingredient_amount`")  # noqa: E501
        # verify the required parameter 'nutrient' is set
        if ('nutrient' not in local_var_params or
                local_var_params['nutrient'] is None):
            raise ApiValueError("Missing the required parameter `nutrient` when calling `compute_ingredient_amount`")  # noqa: E501
        # verify the required parameter 'target' is set
        if ('target' not in local_var_params or
                local_var_params['target'] is None):
            raise ApiValueError("Missing the required parameter `target` when calling `compute_ingredient_amount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'nutrient' in local_var_params:
            query_params.append(('nutrient', local_var_params['nutrient']))  # noqa: E501
        if 'target' in local_var_params:
            query_params.append(('target', local_var_params['target']))  # noqa: E501
        if 'unit' in local_var_params:
            query_params.append(('unit', local_var_params['unit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/ingredients/{id}/amount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecipesParseIngredientsNutritionWeightPerServing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ingredient_information(self, id, **kwargs):  # noqa: E501
        """Get Ingredient Information  # noqa: E501

        Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredient_information(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :param float amount: The amount of this ingredient.
        :param str unit: The unit for the given amount.
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ingredient_information_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ingredient_information_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ingredient_information_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Ingredient Information  # noqa: E501

        Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredient_information_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :param float amount: The amount of this ingredient.
        :param str unit: The unit for the given amount.
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'amount', 'unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ingredient_information" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_ingredient_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'amount' in local_var_params:
            query_params.append(('amount', local_var_params['amount']))  # noqa: E501
        if 'unit' in local_var_params:
            query_params.append(('unit', local_var_params['unit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/ingredients/{id}/information', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ingredient_substitutes(self, ingredient_name, **kwargs):  # noqa: E501
        """Get Ingredient Substitutes  # noqa: E501

        Search for substitutes for a given ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredient_substitutes(ingredient_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ingredient_name: The name of the ingredient you want to replace. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ingredient_substitutes_with_http_info(ingredient_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ingredient_substitutes_with_http_info(ingredient_name, **kwargs)  # noqa: E501
            return data

    def get_ingredient_substitutes_with_http_info(self, ingredient_name, **kwargs):  # noqa: E501
        """Get Ingredient Substitutes  # noqa: E501

        Search for substitutes for a given ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredient_substitutes_with_http_info(ingredient_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ingredient_name: The name of the ingredient you want to replace. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['ingredient_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ingredient_substitutes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ingredient_name' is set
        if ('ingredient_name' not in local_var_params or
                local_var_params['ingredient_name'] is None):
            raise ApiValueError("Missing the required parameter `ingredient_name` when calling `get_ingredient_substitutes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ingredient_name' in local_var_params:
            query_params.append(('ingredientName', local_var_params['ingredient_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/ingredients/substitutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ingredient_substitutes_by_id(self, id, **kwargs):  # noqa: E501
        """Get Ingredient Substitutes by ID  # noqa: E501

        Search for substitutes for a given ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredient_substitutes_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ingredient_substitutes_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ingredient_substitutes_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ingredient_substitutes_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Ingredient Substitutes by ID  # noqa: E501

        Search for substitutes for a given ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredient_substitutes_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The item's id. (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ingredient_substitutes_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_ingredient_substitutes_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/ingredients/{id}/substitutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingredient_search(self, **kwargs):  # noqa: E501
        """Ingredient Search  # noqa: E501

        Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingredient_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param bool add_children: Whether to add children of found foods.
        :param float min_protein_percent: The minimum percentage of protein the food must have (between 0 and 100).
        :param float max_protein_percent: The maximum percentage of protein the food can have (between 0 and 100).
        :param float min_fat_percent: The minimum percentage of fat the food must have (between 0 and 100).
        :param float max_fat_percent: The maximum percentage of fat the food can have (between 0 and 100).
        :param float min_carbs_percent: The minimum percentage of carbs the food must have (between 0 and 100).
        :param float max_carbs_percent: The maximum percentage of carbs the food can have (between 0 and 100).
        :param bool meta_information: Whether to return more meta information about the ingredients.
        :param str intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
        :param str sort: The strategy to sort recipes by. See a full list of supported sorting options.
        :param str sort_direction: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ingredient_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ingredient_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def ingredient_search_with_http_info(self, **kwargs):  # noqa: E501
        """Ingredient Search  # noqa: E501

        Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingredient_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The (natural language) search query.
        :param bool add_children: Whether to add children of found foods.
        :param float min_protein_percent: The minimum percentage of protein the food must have (between 0 and 100).
        :param float max_protein_percent: The maximum percentage of protein the food can have (between 0 and 100).
        :param float min_fat_percent: The minimum percentage of fat the food must have (between 0 and 100).
        :param float max_fat_percent: The maximum percentage of fat the food can have (between 0 and 100).
        :param float min_carbs_percent: The minimum percentage of carbs the food must have (between 0 and 100).
        :param float max_carbs_percent: The maximum percentage of carbs the food can have (between 0 and 100).
        :param bool meta_information: Whether to return more meta information about the ingredients.
        :param str intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
        :param str sort: The strategy to sort recipes by. See a full list of supported sorting options.
        :param str sort_direction: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
        :param int offset: The number of results to skip (between 0 and 900).
        :param int number: The maximum number of items to return (between 1 and 100). Defaults to 10.
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'add_children', 'min_protein_percent', 'max_protein_percent', 'min_fat_percent', 'max_fat_percent', 'min_carbs_percent', 'max_carbs_percent', 'meta_information', 'intolerances', 'sort', 'sort_direction', 'offset', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingredient_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'offset' in local_var_params and local_var_params['offset'] > 900:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `ingredient_search`, must be a value less than or equal to `900`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `ingredient_search`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `ingredient_search`, must be a value less than or equal to `100`")  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `number` when calling `ingredient_search`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'add_children' in local_var_params:
            query_params.append(('addChildren', local_var_params['add_children']))  # noqa: E501
        if 'min_protein_percent' in local_var_params:
            query_params.append(('minProteinPercent', local_var_params['min_protein_percent']))  # noqa: E501
        if 'max_protein_percent' in local_var_params:
            query_params.append(('maxProteinPercent', local_var_params['max_protein_percent']))  # noqa: E501
        if 'min_fat_percent' in local_var_params:
            query_params.append(('minFatPercent', local_var_params['min_fat_percent']))  # noqa: E501
        if 'max_fat_percent' in local_var_params:
            query_params.append(('maxFatPercent', local_var_params['max_fat_percent']))  # noqa: E501
        if 'min_carbs_percent' in local_var_params:
            query_params.append(('minCarbsPercent', local_var_params['min_carbs_percent']))  # noqa: E501
        if 'max_carbs_percent' in local_var_params:
            query_params.append(('maxCarbsPercent', local_var_params['max_carbs_percent']))  # noqa: E501
        if 'meta_information' in local_var_params:
            query_params.append(('metaInformation', local_var_params['meta_information']))  # noqa: E501
        if 'intolerances' in local_var_params:
            query_params.append(('intolerances', local_var_params['intolerances']))  # noqa: E501
        if 'sort' in local_var_params:
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'sort_direction' in local_var_params:
            query_params.append(('sortDirection', local_var_params['sort_direction']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'number' in local_var_params:
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/ingredients/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingredients_by_id_image(self, id, **kwargs):  # noqa: E501
        """Ingredients by ID Image  # noqa: E501

        Visualize a recipe's ingredient list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingredients_by_id_image(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The recipe id. (required)
        :param str measure: Whether the the measures should be 'us' or 'metric'.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ingredients_by_id_image_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ingredients_by_id_image_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ingredients_by_id_image_with_http_info(self, id, **kwargs):  # noqa: E501
        """Ingredients by ID Image  # noqa: E501

        Visualize a recipe's ingredient list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingredients_by_id_image_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The recipe id. (required)
        :param str measure: Whether the the measures should be 'us' or 'metric'.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'measure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingredients_by_id_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `ingredients_by_id_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'measure' in local_var_params:
            query_params.append(('measure', local_var_params['measure']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/recipes/{id}/ingredientWidget.png', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def map_ingredients_to_grocery_products(self, inline_object2, **kwargs):  # noqa: E501
        """Map Ingredients to Grocery Products  # noqa: E501

        Map a set of ingredients to products you can buy in the grocery store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_ingredients_to_grocery_products(inline_object2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineObject2 inline_object2: (required)
        :return: list[InlineResponse20034]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.map_ingredients_to_grocery_products_with_http_info(inline_object2, **kwargs)  # noqa: E501
        else:
            (data) = self.map_ingredients_to_grocery_products_with_http_info(inline_object2, **kwargs)  # noqa: E501
            return data

    def map_ingredients_to_grocery_products_with_http_info(self, inline_object2, **kwargs):  # noqa: E501
        """Map Ingredients to Grocery Products  # noqa: E501

        Map a set of ingredients to products you can buy in the grocery store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_ingredients_to_grocery_products_with_http_info(inline_object2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineObject2 inline_object2: (required)
        :return: list[InlineResponse20034]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method map_ingredients_to_grocery_products" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inline_object2' is set
        if ('inline_object2' not in local_var_params or
                local_var_params['inline_object2'] is None):
            raise ApiValueError("Missing the required parameter `inline_object2` when calling `map_ingredients_to_grocery_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object2' in local_var_params:
            body_params = local_var_params['inline_object2']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/food/ingredients/map', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20034]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def visualize_ingredients(self, **kwargs):  # noqa: E501
        """Ingredients Widget  # noqa: E501

        Visualize ingredients of a recipe. You can play around with that endpoint!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.visualize_ingredients(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: The content type.
        :param str language: The language of the input. Either 'en' or 'de'.
        :param str accept: Accept header.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.visualize_ingredients_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.visualize_ingredients_with_http_info(**kwargs)  # noqa: E501
            return data

    def visualize_ingredients_with_http_info(self, **kwargs):  # noqa: E501
        """Ingredients Widget  # noqa: E501

        Visualize ingredients of a recipe. You can play around with that endpoint!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.visualize_ingredients_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: The content type.
        :param str language: The language of the input. Either 'en' or 'de'.
        :param str accept: Accept header.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['content_type', 'language', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method visualize_ingredients" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language' in local_var_params:
            query_params.append(('language', local_var_params['language']))  # noqa: E501

        header_params = {}
        if 'content_type' in local_var_params:
            header_params['Content-Type'] = local_var_params['content_type']  # noqa: E501
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/recipes/visualizeIngredients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
