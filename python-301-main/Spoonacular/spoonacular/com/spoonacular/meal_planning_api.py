# coding: utf-8

"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spoonacular.api_client import ApiClient
from spoonacular.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MealPlanningApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_meal_plan_template(self, username, hash, inline_object6, **kwargs):  # noqa: E501
        """Add Meal Plan Template  # noqa: E501

        Add a meal plan template for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_meal_plan_template(username, hash, inline_object6, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject6 inline_object6: (required)
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_meal_plan_template_with_http_info(username, hash, inline_object6, **kwargs)  # noqa: E501
        else:
            (data) = self.add_meal_plan_template_with_http_info(username, hash, inline_object6, **kwargs)  # noqa: E501
            return data

    def add_meal_plan_template_with_http_info(self, username, hash, inline_object6, **kwargs):  # noqa: E501
        """Add Meal Plan Template  # noqa: E501

        Add a meal plan template for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_meal_plan_template_with_http_info(username, hash, inline_object6, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject6 inline_object6: (required)
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'hash', 'inline_object6']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_meal_plan_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `add_meal_plan_template`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `add_meal_plan_template`")  # noqa: E501
        # verify the required parameter 'inline_object6' is set
        if ('inline_object6' not in local_var_params or
                local_var_params['inline_object6'] is None):
            raise ApiValueError("Missing the required parameter `inline_object6` when calling `add_meal_plan_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object6' in local_var_params:
            body_params = local_var_params['inline_object6']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [''])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_to_meal_plan(self, username, hash, inline_object4, **kwargs):  # noqa: E501
        """Add to Meal Plan  # noqa: E501

        Add an item to the user's meal plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_to_meal_plan(username, hash, inline_object4, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject4 inline_object4: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_to_meal_plan_with_http_info(username, hash, inline_object4, **kwargs)  # noqa: E501
        else:
            (data) = self.add_to_meal_plan_with_http_info(username, hash, inline_object4, **kwargs)  # noqa: E501
            return data

    def add_to_meal_plan_with_http_info(self, username, hash, inline_object4, **kwargs):  # noqa: E501
        """Add to Meal Plan  # noqa: E501

        Add an item to the user's meal plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_to_meal_plan_with_http_info(username, hash, inline_object4, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject4 inline_object4: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'hash', 'inline_object4']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_to_meal_plan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `add_to_meal_plan`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `add_to_meal_plan`")  # noqa: E501
        # verify the required parameter 'inline_object4' is set
        if ('inline_object4' not in local_var_params or
                local_var_params['inline_object4'] is None):
            raise ApiValueError("Missing the required parameter `inline_object4` when calling `add_to_meal_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object4' in local_var_params:
            body_params = local_var_params['inline_object4']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_to_shopping_list(self, username, hash, inline_object9, **kwargs):  # noqa: E501
        """Add to Shopping List  # noqa: E501

        Add an item to the current shopping list of a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_to_shopping_list(username, hash, inline_object9, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject9 inline_object9: (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_to_shopping_list_with_http_info(username, hash, inline_object9, **kwargs)  # noqa: E501
        else:
            (data) = self.add_to_shopping_list_with_http_info(username, hash, inline_object9, **kwargs)  # noqa: E501
            return data

    def add_to_shopping_list_with_http_info(self, username, hash, inline_object9, **kwargs):  # noqa: E501
        """Add to Shopping List  # noqa: E501

        Add an item to the current shopping list of a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_to_shopping_list_with_http_info(username, hash, inline_object9, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject9 inline_object9: (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'hash', 'inline_object9']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_to_shopping_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `add_to_shopping_list`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `add_to_shopping_list`")  # noqa: E501
        # verify the required parameter 'inline_object9' is set
        if ('inline_object9' not in local_var_params or
                local_var_params['inline_object9'] is None):
            raise ApiValueError("Missing the required parameter `inline_object9` when calling `add_to_shopping_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object9' in local_var_params:
            body_params = local_var_params['inline_object9']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/shopping-list/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_meal_plan_day(self, username, date, hash, inline_object3, **kwargs):  # noqa: E501
        """Clear Meal Plan Day  # noqa: E501

        Delete all planned items from the user's meal plan for a specific day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_meal_plan_day(username, date, hash, inline_object3, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str date: The date in the format yyyy-mm-dd. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject3 inline_object3: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_meal_plan_day_with_http_info(username, date, hash, inline_object3, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_meal_plan_day_with_http_info(username, date, hash, inline_object3, **kwargs)  # noqa: E501
            return data

    def clear_meal_plan_day_with_http_info(self, username, date, hash, inline_object3, **kwargs):  # noqa: E501
        """Clear Meal Plan Day  # noqa: E501

        Delete all planned items from the user's meal plan for a specific day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_meal_plan_day_with_http_info(username, date, hash, inline_object3, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str date: The date in the format yyyy-mm-dd. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject3 inline_object3: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'date', 'hash', 'inline_object3']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_meal_plan_day" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `clear_meal_plan_day`")  # noqa: E501
        # verify the required parameter 'date' is set
        if ('date' not in local_var_params or
                local_var_params['date'] is None):
            raise ApiValueError("Missing the required parameter `date` when calling `clear_meal_plan_day`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `clear_meal_plan_day`")  # noqa: E501
        # verify the required parameter 'inline_object3' is set
        if ('inline_object3' not in local_var_params or
                local_var_params['inline_object3'] is None):
            raise ApiValueError("Missing the required parameter `inline_object3` when calling `clear_meal_plan_day`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'date' in local_var_params:
            path_params['date'] = local_var_params['date']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object3' in local_var_params:
            body_params = local_var_params['inline_object3']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [''])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/day/{date}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connect_user(self, body, **kwargs):  # noqa: E501
        """Connect User  # noqa: E501

        In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connect_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.connect_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def connect_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """Connect User  # noqa: E501

        In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connect_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `connect_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/users/connect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_from_meal_plan(self, username, id, hash, inline_object5, **kwargs):  # noqa: E501
        """Delete from Meal Plan  # noqa: E501

        Delete an item from the user's meal plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_from_meal_plan(username, id, hash, inline_object5, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param float id: The shopping list item id. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject5 inline_object5: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_from_meal_plan_with_http_info(username, id, hash, inline_object5, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_from_meal_plan_with_http_info(username, id, hash, inline_object5, **kwargs)  # noqa: E501
            return data

    def delete_from_meal_plan_with_http_info(self, username, id, hash, inline_object5, **kwargs):  # noqa: E501
        """Delete from Meal Plan  # noqa: E501

        Delete an item from the user's meal plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_from_meal_plan_with_http_info(username, id, hash, inline_object5, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param float id: The shopping list item id. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject5 inline_object5: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'id', 'hash', 'inline_object5']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_from_meal_plan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `delete_from_meal_plan`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `delete_from_meal_plan`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `delete_from_meal_plan`")  # noqa: E501
        # verify the required parameter 'inline_object5' is set
        if ('inline_object5' not in local_var_params or
                local_var_params['inline_object5'] is None):
            raise ApiValueError("Missing the required parameter `inline_object5` when calling `delete_from_meal_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object5' in local_var_params:
            body_params = local_var_params['inline_object5']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [''])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/items/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_from_shopping_list(self, username, id, hash, inline_object10, **kwargs):  # noqa: E501
        """Delete from Shopping List  # noqa: E501

        Delete an item from the current shopping list of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_from_shopping_list(username, id, hash, inline_object10, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param int id: The item's id. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject10 inline_object10: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_from_shopping_list_with_http_info(username, id, hash, inline_object10, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_from_shopping_list_with_http_info(username, id, hash, inline_object10, **kwargs)  # noqa: E501
            return data

    def delete_from_shopping_list_with_http_info(self, username, id, hash, inline_object10, **kwargs):  # noqa: E501
        """Delete from Shopping List  # noqa: E501

        Delete an item from the current shopping list of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_from_shopping_list_with_http_info(username, id, hash, inline_object10, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param int id: The item's id. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject10 inline_object10: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'id', 'hash', 'inline_object10']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_from_shopping_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `delete_from_shopping_list`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `delete_from_shopping_list`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `delete_from_shopping_list`")  # noqa: E501
        # verify the required parameter 'inline_object10' is set
        if ('inline_object10' not in local_var_params or
                local_var_params['inline_object10'] is None):
            raise ApiValueError("Missing the required parameter `inline_object10` when calling `delete_from_shopping_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object10' in local_var_params:
            body_params = local_var_params['inline_object10']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [''])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/shopping-list/items/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_meal_plan_template(self, username, id, hash, inline_object7, **kwargs):  # noqa: E501
        """Delete Meal Plan Template  # noqa: E501

        Delete a meal plan template for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_meal_plan_template(username, id, hash, inline_object7, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param int id: The item's id. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject7 inline_object7: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_meal_plan_template_with_http_info(username, id, hash, inline_object7, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_meal_plan_template_with_http_info(username, id, hash, inline_object7, **kwargs)  # noqa: E501
            return data

    def delete_meal_plan_template_with_http_info(self, username, id, hash, inline_object7, **kwargs):  # noqa: E501
        """Delete Meal Plan Template  # noqa: E501

        Delete a meal plan template for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_meal_plan_template_with_http_info(username, id, hash, inline_object7, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param int id: The item's id. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject7 inline_object7: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'id', 'hash', 'inline_object7']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_meal_plan_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `delete_meal_plan_template`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `delete_meal_plan_template`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `delete_meal_plan_template`")  # noqa: E501
        # verify the required parameter 'inline_object7' is set
        if ('inline_object7' not in local_var_params or
                local_var_params['inline_object7'] is None):
            raise ApiValueError("Missing the required parameter `inline_object7` when calling `delete_meal_plan_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object7' in local_var_params:
            body_params = local_var_params['inline_object7']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [''])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/templates/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_meal_plan(self, **kwargs):  # noqa: E501
        """Generate Meal Plan  # noqa: E501

        Generate a meal plan with three meals per day (breakfast, lunch, and dinner).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_meal_plan(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str time_frame: Either for one \"day\" or an entire \"week\".
        :param float target_calories: What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
        :param str diet: Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
        :param str exclude: A comma-separated list of allergens or ingredients that must be excluded.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_meal_plan_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_meal_plan_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_meal_plan_with_http_info(self, **kwargs):  # noqa: E501
        """Generate Meal Plan  # noqa: E501

        Generate a meal plan with three meals per day (breakfast, lunch, and dinner).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_meal_plan_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str time_frame: Either for one \"day\" or an entire \"week\".
        :param float target_calories: What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
        :param str diet: Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
        :param str exclude: A comma-separated list of allergens or ingredients that must be excluded.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['time_frame', 'target_calories', 'diet', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_meal_plan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'time_frame' in local_var_params:
            query_params.append(('timeFrame', local_var_params['time_frame']))  # noqa: E501
        if 'target_calories' in local_var_params:
            query_params.append(('targetCalories', local_var_params['target_calories']))  # noqa: E501
        if 'diet' in local_var_params:
            query_params.append(('diet', local_var_params['diet']))  # noqa: E501
        if 'exclude' in local_var_params:
            query_params.append(('exclude', local_var_params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/generate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_shopping_list(self, username, start_date, end_date, hash, inline_object8, **kwargs):  # noqa: E501
        """Generate Shopping List  # noqa: E501

        Generate the shopping list for a user from the meal planner in a given time frame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_shopping_list(username, start_date, end_date, hash, inline_object8, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str start_date: The start date in the format yyyy-mm-dd. (required)
        :param str end_date: The end date in the format yyyy-mm-dd. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject8 inline_object8: (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_shopping_list_with_http_info(username, start_date, end_date, hash, inline_object8, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_shopping_list_with_http_info(username, start_date, end_date, hash, inline_object8, **kwargs)  # noqa: E501
            return data

    def generate_shopping_list_with_http_info(self, username, start_date, end_date, hash, inline_object8, **kwargs):  # noqa: E501
        """Generate Shopping List  # noqa: E501

        Generate the shopping list for a user from the meal planner in a given time frame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_shopping_list_with_http_info(username, start_date, end_date, hash, inline_object8, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str start_date: The start date in the format yyyy-mm-dd. (required)
        :param str end_date: The end date in the format yyyy-mm-dd. (required)
        :param str hash: The private hash for the username. (required)
        :param InlineObject8 inline_object8: (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'start_date', 'end_date', 'hash', 'inline_object8']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_shopping_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `generate_shopping_list`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if ('start_date' not in local_var_params or
                local_var_params['start_date'] is None):
            raise ApiValueError("Missing the required parameter `start_date` when calling `generate_shopping_list`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in local_var_params or
                local_var_params['end_date'] is None):
            raise ApiValueError("Missing the required parameter `end_date` when calling `generate_shopping_list`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `generate_shopping_list`")  # noqa: E501
        # verify the required parameter 'inline_object8' is set
        if ('inline_object8' not in local_var_params or
                local_var_params['inline_object8'] is None):
            raise ApiValueError("Missing the required parameter `inline_object8` when calling `generate_shopping_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'start_date' in local_var_params:
            path_params['start-date'] = local_var_params['start_date']  # noqa: E501
        if 'end_date' in local_var_params:
            path_params['end-date'] = local_var_params['end_date']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object8' in local_var_params:
            body_params = local_var_params['inline_object8']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [''])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/shopping-list/{start-date}/{end-date}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_meal_plan_template(self, username, id, hash, **kwargs):  # noqa: E501
        """Get Meal Plan Template  # noqa: E501

        Get information about a meal plan template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meal_plan_template(username, id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param int id: The item's id. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_meal_plan_template_with_http_info(username, id, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_meal_plan_template_with_http_info(username, id, hash, **kwargs)  # noqa: E501
            return data

    def get_meal_plan_template_with_http_info(self, username, id, hash, **kwargs):  # noqa: E501
        """Get Meal Plan Template  # noqa: E501

        Get information about a meal plan template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meal_plan_template_with_http_info(username, id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param int id: The item's id. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'id', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_meal_plan_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `get_meal_plan_template`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_meal_plan_template`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `get_meal_plan_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/templates/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_meal_plan_templates(self, username, hash, **kwargs):  # noqa: E501
        """Get Meal Plan Templates  # noqa: E501

        Get meal plan templates from user or public ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meal_plan_templates(username, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_meal_plan_templates_with_http_info(username, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_meal_plan_templates_with_http_info(username, hash, **kwargs)  # noqa: E501
            return data

    def get_meal_plan_templates_with_http_info(self, username, hash, **kwargs):  # noqa: E501
        """Get Meal Plan Templates  # noqa: E501

        Get meal plan templates from user or public ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meal_plan_templates_with_http_info(username, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_meal_plan_templates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `get_meal_plan_templates`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `get_meal_plan_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_meal_plan_week(self, username, start_date, hash, **kwargs):  # noqa: E501
        """Get Meal Plan Week  # noqa: E501

        Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meal_plan_week(username, start_date, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str start_date: The start date of the meal planned week in the format yyyy-mm-dd. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_meal_plan_week_with_http_info(username, start_date, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_meal_plan_week_with_http_info(username, start_date, hash, **kwargs)  # noqa: E501
            return data

    def get_meal_plan_week_with_http_info(self, username, start_date, hash, **kwargs):  # noqa: E501
        """Get Meal Plan Week  # noqa: E501

        Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_meal_plan_week_with_http_info(username, start_date, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str start_date: The start date of the meal planned week in the format yyyy-mm-dd. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'start_date', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_meal_plan_week" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `get_meal_plan_week`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if ('start_date' not in local_var_params or
                local_var_params['start_date'] is None):
            raise ApiValueError("Missing the required parameter `start_date` when calling `get_meal_plan_week`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `get_meal_plan_week`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'start_date' in local_var_params:
            path_params['start-date'] = local_var_params['start_date']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/week/{start-date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shopping_list(self, username, hash, **kwargs):  # noqa: E501
        """Get Shopping List  # noqa: E501

        Get the current shopping list for the given user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shopping_list(username, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shopping_list_with_http_info(username, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shopping_list_with_http_info(username, hash, **kwargs)  # noqa: E501
            return data

    def get_shopping_list_with_http_info(self, username, hash, **kwargs):  # noqa: E501
        """Get Shopping List  # noqa: E501

        Get the current shopping list for the given user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shopping_list_with_http_info(username, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username. (required)
        :param str hash: The private hash for the username. (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shopping_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `get_shopping_list`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in local_var_params or
                local_var_params['hash'] is None):
            raise ApiValueError("Missing the required parameter `hash` when calling `get_shopping_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []
        if 'hash' in local_var_params:
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyScheme']  # noqa: E501

        return self.api_client.call_api(
            '/mealplanner/{username}/shopping-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
